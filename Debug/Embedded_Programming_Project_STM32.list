
Embedded_Programming_Project_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003444  08003444  00004444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034d0  080034d0  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080034d0  080034d0  000044d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034d8  080034d8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d8  080034d8  000044d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034dc  080034dc  000044dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080034e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          000001b4  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000812e  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016a5  00000000  00000000  0000d1ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000698  00000000  00000000  0000e860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000506  00000000  00000000  0000eef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203d1  00000000  00000000  0000f3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008ea1  00000000  00000000  0002f7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3209  00000000  00000000  00038670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fb879  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f20  00000000  00000000  000fb8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  000fd7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800342c 	.word	0x0800342c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800342c 	.word	0x0800342c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
UART_HandleTypeDef	huart2;




int main(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0


	HAL_Init();
 8000574:	f000 fa44 	bl	8000a00 <HAL_Init>
	SystemClock_Config_HSE(SYS_CLOCK_FRQEQ_50_MHZ);
 8000578:	2032      	movs	r0, #50	@ 0x32
 800057a:	f000 f82b 	bl	80005d4 <SystemClock_Config_HSE>
	//SystemClock_Config_HSI(SYS_CLOCK_FRQEQ_50_MHZ);
	UART2_Init();
 800057e:	f000 f803 	bl	8000588 <UART2_Init>


	while(1);
 8000582:	bf00      	nop
 8000584:	e7fd      	b.n	8000582 <main+0x12>
	...

08000588 <UART2_Init>:
	return 0;
}

void UART2_Init(void){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800058c:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <UART2_Init+0x44>)
 800058e:	4a10      	ldr	r2, [pc, #64]	@ (80005d0 <UART2_Init+0x48>)
 8000590:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <UART2_Init+0x44>)
 8000594:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000598:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059a:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <UART2_Init+0x44>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1 ;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <UART2_Init+0x44>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <UART2_Init+0x44>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <UART2_Init+0x44>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <UART2_Init+0x44>)
 80005b4:	220c      	movs	r2, #12
 80005b6:	615a      	str	r2, [r3, #20]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80005b8:	4804      	ldr	r0, [pc, #16]	@ (80005cc <UART2_Init+0x44>)
 80005ba:	f001 fa95 	bl	8001ae8 <HAL_UART_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <UART2_Init+0x40>
		// There is a problem
		Error_handler();
 80005c4:	f000 f926 	bl	8000814 <Error_handler>
	}
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000078 	.word	0x20000078
 80005d0:	40004400 	.word	0x40004400

080005d4 <SystemClock_Config_HSE>:
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);


}

void SystemClock_Config_HSE(uint8_t clock_freq) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b0ae      	sub	sp, #184	@ 0xb8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef	osc_init;
	RCC_ClkInitTypeDef	clk_init;
	uint32_t flashLatency = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	char	msg[100];
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	osc_init.HSEState = RCC_HSE_BYPASS;
 80005ea:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	osc_init.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	switch (clock_freq) {
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	2b78      	cmp	r3, #120	@ 0x78
 8000604:	d041      	beq.n	800068a <SystemClock_Config_HSE+0xb6>
 8000606:	2b78      	cmp	r3, #120	@ 0x78
 8000608:	f300 80f3 	bgt.w	80007f2 <SystemClock_Config_HSE+0x21e>
 800060c:	2b32      	cmp	r3, #50	@ 0x32
 800060e:	d002      	beq.n	8000616 <SystemClock_Config_HSE+0x42>
 8000610:	2b54      	cmp	r3, #84	@ 0x54
 8000612:	d01d      	beq.n	8000650 <SystemClock_Config_HSE+0x7c>
			clk_init.APB1CLKDivider	= RCC_HCLK_DIV4;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
			flashLatency = FLASH_LATENCY_3;
			break;
		default:
			return;
 8000614:	e0ed      	b.n	80007f2 <SystemClock_Config_HSE+0x21e>
			osc_init.PLL.PLLM = 8;
 8000616:	2308      	movs	r3, #8
 8000618:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			osc_init.PLL.PLLN = 100;
 800061c:	2364      	movs	r3, #100	@ 0x64
 800061e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			osc_init.PLL.PLLP = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			osc_init.PLL.PLLQ = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800062e:	230f      	movs	r3, #15
 8000630:	673b      	str	r3, [r7, #112]	@ 0x70
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	677b      	str	r3, [r7, #116]	@ 0x74
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	67bb      	str	r3, [r7, #120]	@ 0x78
			clk_init.APB1CLKDivider	= RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063e:	67fb      	str	r3, [r7, #124]	@ 0x7c
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000644:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			flashLatency = FLASH_LATENCY_1;
 8000648:	2301      	movs	r3, #1
 800064a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			break;
 800064e:	e039      	b.n	80006c4 <SystemClock_Config_HSE+0xf0>
			osc_init.PLL.PLLM = 8;
 8000650:	2308      	movs	r3, #8
 8000652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			osc_init.PLL.PLLN = 168;
 8000656:	23a8      	movs	r3, #168	@ 0xa8
 8000658:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			osc_init.PLL.PLLP = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			osc_init.PLL.PLLQ = 2;
 8000662:	2302      	movs	r3, #2
 8000664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000668:	230f      	movs	r3, #15
 800066a:	673b      	str	r3, [r7, #112]	@ 0x70
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	677b      	str	r3, [r7, #116]	@ 0x74
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	67bb      	str	r3, [r7, #120]	@ 0x78
			clk_init.APB1CLKDivider	= RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000678:	67fb      	str	r3, [r7, #124]	@ 0x7c
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			flashLatency = FLASH_LATENCY_2;
 8000682:	2302      	movs	r3, #2
 8000684:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			break;
 8000688:	e01c      	b.n	80006c4 <SystemClock_Config_HSE+0xf0>
			osc_init.PLL.PLLM = 8;
 800068a:	2308      	movs	r3, #8
 800068c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			osc_init.PLL.PLLN = 240;
 8000690:	23f0      	movs	r3, #240	@ 0xf0
 8000692:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			osc_init.PLL.PLLP = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			osc_init.PLL.PLLQ = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80006a2:	230f      	movs	r3, #15
 80006a4:	673b      	str	r3, [r7, #112]	@ 0x70
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	677b      	str	r3, [r7, #116]	@ 0x74
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	67bb      	str	r3, [r7, #120]	@ 0x78
			clk_init.APB1CLKDivider	= RCC_HCLK_DIV4;
 80006ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			flashLatency = FLASH_LATENCY_3;
 80006bc:	2303      	movs	r3, #3
 80006be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			break;
 80006c2:	bf00      	nop
	}
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
 80006c4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fd75 	bl	80011b8 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config_HSE+0x104>
		Error_handler();
 80006d4:	f000 f89e 	bl	8000814 <Error_handler>
	}
	HAL_RCC_ClockConfig(&clk_init, flashLatency);
 80006d8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 ffe1 	bl	80016a8 <HAL_RCC_ClockConfig>

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80006e6:	f001 f9cb 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a43      	ldr	r2, [pc, #268]	@ (80007fc <SystemClock_Config_HSE+0x228>)
 80006ee:	fba2 2303 	umull	r2, r3, r2, r3
 80006f2:	099b      	lsrs	r3, r3, #6
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fafa 	bl	8000cee <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006fa:	2004      	movs	r0, #4
 80006fc:	f000 fb04 	bl	8000d08 <HAL_SYSTICK_CLKSourceConfig>

	memset(msg,0,sizeof(msg));
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2264      	movs	r2, #100	@ 0x64
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fa0f 	bl	8002b2c <memset>
	sprintf(msg, "SYSCLK : %ld\r\n", HAL_RCC_GetSysClockFreq());
 800070e:	f001 f8b1 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8000712:	4602      	mov	r2, r0
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4939      	ldr	r1, [pc, #228]	@ (8000800 <SystemClock_Config_HSE+0x22c>)
 800071a:	4618      	mov	r0, r3
 800071c:	f002 f9e6 	bl	8002aec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fd53 	bl	80001d0 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	f107 010c 	add.w	r1, r7, #12
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	4833      	ldr	r0, [pc, #204]	@ (8000804 <SystemClock_Config_HSE+0x230>)
 8000738:	f001 fa26 	bl	8001b88 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2264      	movs	r2, #100	@ 0x64
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f002 f9f1 	bl	8002b2c <memset>
	sprintf(msg, "HCLK : %ld\r\n", HAL_RCC_GetHCLKFreq());
 800074a:	f001 f999 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 800074e:	4602      	mov	r2, r0
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	492c      	ldr	r1, [pc, #176]	@ (8000808 <SystemClock_Config_HSE+0x234>)
 8000756:	4618      	mov	r0, r3
 8000758:	f002 f9c8 	bl	8002aec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd35 	bl	80001d0 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	b29a      	uxth	r2, r3
 800076a:	f107 010c 	add.w	r1, r7, #12
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	4824      	ldr	r0, [pc, #144]	@ (8000804 <SystemClock_Config_HSE+0x230>)
 8000774:	f001 fa08 	bl	8001b88 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2264      	movs	r2, #100	@ 0x64
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f002 f9d3 	bl	8002b2c <memset>
	sprintf(msg, "PCLK1 : %ld\r\n", HAL_RCC_GetPCLK1Freq());
 8000786:	f001 f987 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 800078a:	4602      	mov	r2, r0
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	491e      	ldr	r1, [pc, #120]	@ (800080c <SystemClock_Config_HSE+0x238>)
 8000792:	4618      	mov	r0, r3
 8000794:	f002 f9aa 	bl	8002aec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fd17 	bl	80001d0 <strlen>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	f107 010c 	add.w	r1, r7, #12
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	4815      	ldr	r0, [pc, #84]	@ (8000804 <SystemClock_Config_HSE+0x230>)
 80007b0:	f001 f9ea 	bl	8001b88 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2264      	movs	r2, #100	@ 0x64
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 f9b5 	bl	8002b2c <memset>
	sprintf(msg, "PCLK2 : %ld\r\n", HAL_RCC_GetPCLK2Freq());
 80007c2:	f001 f97d 	bl	8001ac0 <HAL_RCC_GetPCLK2Freq>
 80007c6:	4602      	mov	r2, r0
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4910      	ldr	r1, [pc, #64]	@ (8000810 <SystemClock_Config_HSE+0x23c>)
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 f98c 	bl	8002aec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fcf9 	bl	80001d0 <strlen>
 80007de:	4603      	mov	r3, r0
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	f107 010c 	add.w	r1, r7, #12
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	4806      	ldr	r0, [pc, #24]	@ (8000804 <SystemClock_Config_HSE+0x230>)
 80007ec:	f001 f9cc 	bl	8001b88 <HAL_UART_Transmit>
 80007f0:	e000      	b.n	80007f4 <SystemClock_Config_HSE+0x220>
			return;
 80007f2:	bf00      	nop


}
 80007f4:	37b8      	adds	r7, #184	@ 0xb8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	10624dd3 	.word	0x10624dd3
 8000800:	08003444 	.word	0x08003444
 8000804:	20000078 	.word	0x20000078
 8000808:	08003454 	.word	0x08003454
 800080c:	08003464 	.word	0x08003464
 8000810:	08003474 	.word	0x08003474

08000814 <Error_handler>:

void Error_handler(void) {
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <SysTick_Handler>:

#include "main.h"

extern UART_HandleTypeDef	huart2;

void SysTick_Handler (void) {
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000826:	f000 f93d 	bl	8000aa4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800082a:	f000 fa89 	bl	8000d40 <HAL_SYSTICK_IRQHandler>
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000838:	4802      	ldr	r0, [pc, #8]	@ (8000844 <USART2_IRQHandler+0x10>)
 800083a:	f001 fa31 	bl	8001ca0 <HAL_UART_IRQHandler>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000078 	.word	0x20000078

08000848 <HAL_MspInit>:
 *  Created on: Jan 28, 2025
 *      Author: dineshbobburu
 */
#include "main.h"

void HAL_MspInit(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	// Here we will do low level processor specific init's.
	// 1. Setup the priority grouping of arm cortex mx procesor.
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084c:	2003      	movs	r0, #3
 800084e:	f000 fa19 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the requires system exceptions of the arm cortex mx processor.
	SCB->SHCSR |= 0x7<<16; // Enabled usage fault, bus fault and memory fault system exceptions
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <HAL_MspInit+0x40>)
 8000854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000856:	4a0c      	ldr	r2, [pc, #48]	@ (8000888 <HAL_MspInit+0x40>)
 8000858:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800085c:	6253      	str	r3, [r2, #36]	@ 0x24

	//3. configure the priority for the system exceptions.

	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	f06f 000b 	mvn.w	r0, #11
 8000866:	f000 fa18 	bl	8000c9a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	f06f 000a 	mvn.w	r0, #10
 8000872:	f000 fa12 	bl	8000c9a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	f06f 0009 	mvn.w	r0, #9
 800087e:	f000 fa0c 	bl	8000c9a <HAL_NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
 // here we are going to do the low level initializations of USART2 peripheral.
	//1. Enable the clock for USART2 Peri.
	__HAL_RCC_USART2_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <HAL_UART_MspInit+0x88>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089c:	4a1d      	ldr	r2, [pc, #116]	@ (8000914 <HAL_UART_MspInit+0x88>)
 800089e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <HAL_UART_MspInit+0x88>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <HAL_UART_MspInit+0x88>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b8:	4a16      	ldr	r2, [pc, #88]	@ (8000914 <HAL_UART_MspInit+0x88>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <HAL_UART_MspInit+0x88>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
	//2. DO the pin muxing configurations.
	gpio_uart.Pin = GPIO_PIN_2;
 80008cc:	2304      	movs	r3, #4
 80008ce:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2; // UART2_TX
 80008dc:	2307      	movs	r3, #7
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	480c      	ldr	r0, [pc, #48]	@ (8000918 <HAL_UART_MspInit+0x8c>)
 80008e8:	f000 faca 	bl	8000e80 <HAL_GPIO_Init>
	gpio_uart.Pin = GPIO_PIN_3; // UART2_RX
 80008ec:	2308      	movs	r3, #8
 80008ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	4808      	ldr	r0, [pc, #32]	@ (8000918 <HAL_UART_MspInit+0x8c>)
 80008f8:	f000 fac2 	bl	8000e80 <HAL_GPIO_Init>
	//3. Enable the IRQ and set the priority(NVIC Settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008fc:	2026      	movs	r0, #38	@ 0x26
 80008fe:	f000 f9e8 	bl	8000cd2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	210f      	movs	r1, #15
 8000906:	2026      	movs	r0, #38	@ 0x26
 8000908:	f000 f9c7 	bl	8000c9a <HAL_NVIC_SetPriority>
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	@ 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000924:	4a14      	ldr	r2, [pc, #80]	@ (8000978 <_sbrk+0x5c>)
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <_sbrk+0x60>)
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000930:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <_sbrk+0x64>)
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <_sbrk+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	429a      	cmp	r2, r3
 800094a:	d207      	bcs.n	800095c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800094c:	f002 f8f6 	bl	8002b3c <__errno>
 8000950:	4603      	mov	r3, r0
 8000952:	220c      	movs	r2, #12
 8000954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	e009      	b.n	8000970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000962:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <_sbrk+0x64>)
 800096c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20020000 	.word	0x20020000
 800097c:	00000400 	.word	0x00000400
 8000980:	200000c0 	.word	0x200000c0
 8000984:	20000210 	.word	0x20000210

08000988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	@ (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009b0:	f7ff ffea 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b4:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009b6:	490d      	ldr	r1, [pc, #52]	@ (80009ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b8:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009cc:	4c0a      	ldr	r4, [pc, #40]	@ (80009f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009da:	f002 f8b5 	bl	8002b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009de:	f7ff fdc7 	bl	8000570 <main>
  bx  lr    
 80009e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009f0:	080034e0 	.word	0x080034e0
  ldr r2, =_sbss
 80009f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009f8:	20000210 	.word	0x20000210

080009fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <HAL_Init+0x40>)
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <HAL_Init+0x40>)
 8000a16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a07      	ldr	r2, [pc, #28]	@ (8000a40 <HAL_Init+0x40>)
 8000a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f92b 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 f808 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f7ff ff08 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023c00 	.word	0x40023c00

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_InitTick+0x54>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <HAL_InitTick+0x58>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f943 	bl	8000cee <HAL_SYSTICK_Config>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00e      	b.n	8000a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d80a      	bhi.n	8000a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f000 f90b 	bl	8000c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a84:	4a06      	ldr	r2, [pc, #24]	@ (8000aa0 <HAL_InitTick+0x5c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_IncTick+0x20>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_IncTick+0x24>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <HAL_IncTick+0x24>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	200000c4 	.word	0x200000c4

08000acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <HAL_GetTick+0x14>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200000c4 	.word	0x200000c4

08000ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b00:	4013      	ands	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b16:	4a04      	ldr	r2, [pc, #16]	@ (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	60d3      	str	r3, [r2, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b30:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <__NVIC_GetPriorityGrouping+0x18>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	f003 0307 	and.w	r3, r3, #7
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	db0b      	blt.n	8000b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	f003 021f 	and.w	r2, r3, #31
 8000b60:	4907      	ldr	r1, [pc, #28]	@ (8000b80 <__NVIC_EnableIRQ+0x38>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	095b      	lsrs	r3, r3, #5
 8000b68:	2001      	movs	r0, #1
 8000b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db0a      	blt.n	8000bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	@ (8000bd0 <__NVIC_SetPriority+0x4c>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bac:	e00a      	b.n	8000bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4908      	ldr	r1, [pc, #32]	@ (8000bd4 <__NVIC_SetPriority+0x50>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	761a      	strb	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	@ 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f1c3 0307 	rsb	r3, r3, #7
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2304      	movcs	r3, #4
 8000bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d902      	bls.n	8000c08 <NVIC_EncodePriority+0x30>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3b03      	subs	r3, #3
 8000c06:	e000      	b.n	8000c0a <NVIC_EncodePriority+0x32>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43da      	mvns	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43d9      	mvns	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	4313      	orrs	r3, r2
         );
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3724      	adds	r7, #36	@ 0x24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c50:	d301      	bcc.n	8000c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00f      	b.n	8000c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c56:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <SysTick_Config+0x40>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f7ff ff8e 	bl	8000b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <SysTick_Config+0x40>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <SysTick_Config+0x40>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff29 	bl	8000ae4 <__NVIC_SetPriorityGrouping>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff3e 	bl	8000b2c <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ff8e 	bl	8000bd8 <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff5d 	bl	8000b84 <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff31 	bl	8000b48 <__NVIC_EnableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffa2 	bl	8000c40 <SysTick_Config>
 8000cfc:	4603      	mov	r3, r0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d106      	bne.n	8000d24 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a08      	ldr	r2, [pc, #32]	@ (8000d3c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d22:	e005      	b.n	8000d30 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d2a:	f023 0304 	bic.w	r3, r3, #4
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d44:	f000 f802 	bl	8000d4c <HAL_SYSTICK_Callback>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff feb0 	bl	8000acc <HAL_GetTick>
 8000d6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d008      	beq.n	8000d8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2280      	movs	r2, #128	@ 0x80
 8000d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e052      	b.n	8000e32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0216 	bic.w	r2, r2, #22
 8000d9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	695a      	ldr	r2, [r3, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000daa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d103      	bne.n	8000dbc <HAL_DMA_Abort+0x62>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0208 	bic.w	r2, r2, #8
 8000dca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f022 0201 	bic.w	r2, r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ddc:	e013      	b.n	8000e06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dde:	f7ff fe75 	bl	8000acc <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d90c      	bls.n	8000e06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2220      	movs	r2, #32
 8000df0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2203      	movs	r2, #3
 8000df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e015      	b.n	8000e32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1e4      	bne.n	8000dde <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e18:	223f      	movs	r2, #63	@ 0x3f
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d004      	beq.n	8000e58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2280      	movs	r2, #128	@ 0x80
 8000e52:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e00c      	b.n	8000e72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0201 	bic.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	@ 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	e16b      	b.n	8001174 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	f040 815a 	bne.w	800116e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d005      	beq.n	8000ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d130      	bne.n	8000f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	f003 0201 	and.w	r2, r3, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d017      	beq.n	8000f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d123      	bne.n	8000fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	08da      	lsrs	r2, r3, #3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3208      	adds	r2, #8
 8000f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	220f      	movs	r2, #15
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	08da      	lsrs	r2, r3, #3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3208      	adds	r2, #8
 8000fbe:	69b9      	ldr	r1, [r7, #24]
 8000fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0203 	and.w	r2, r3, #3
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80b4 	beq.w	800116e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b60      	ldr	r3, [pc, #384]	@ (800118c <HAL_GPIO_Init+0x30c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	4a5f      	ldr	r2, [pc, #380]	@ (800118c <HAL_GPIO_Init+0x30c>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001014:	6453      	str	r3, [r2, #68]	@ 0x44
 8001016:	4b5d      	ldr	r3, [pc, #372]	@ (800118c <HAL_GPIO_Init+0x30c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001022:	4a5b      	ldr	r2, [pc, #364]	@ (8001190 <HAL_GPIO_Init+0x310>)
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	220f      	movs	r2, #15
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a52      	ldr	r2, [pc, #328]	@ (8001194 <HAL_GPIO_Init+0x314>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d02b      	beq.n	80010a6 <HAL_GPIO_Init+0x226>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a51      	ldr	r2, [pc, #324]	@ (8001198 <HAL_GPIO_Init+0x318>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d025      	beq.n	80010a2 <HAL_GPIO_Init+0x222>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a50      	ldr	r2, [pc, #320]	@ (800119c <HAL_GPIO_Init+0x31c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d01f      	beq.n	800109e <HAL_GPIO_Init+0x21e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4f      	ldr	r2, [pc, #316]	@ (80011a0 <HAL_GPIO_Init+0x320>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d019      	beq.n	800109a <HAL_GPIO_Init+0x21a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4e      	ldr	r2, [pc, #312]	@ (80011a4 <HAL_GPIO_Init+0x324>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0x216>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4d      	ldr	r2, [pc, #308]	@ (80011a8 <HAL_GPIO_Init+0x328>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d00d      	beq.n	8001092 <HAL_GPIO_Init+0x212>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4c      	ldr	r2, [pc, #304]	@ (80011ac <HAL_GPIO_Init+0x32c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x20e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4b      	ldr	r2, [pc, #300]	@ (80011b0 <HAL_GPIO_Init+0x330>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_GPIO_Init+0x20a>
 8001086:	2307      	movs	r3, #7
 8001088:	e00e      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 800108a:	2308      	movs	r3, #8
 800108c:	e00c      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 800108e:	2306      	movs	r3, #6
 8001090:	e00a      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 8001092:	2305      	movs	r3, #5
 8001094:	e008      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 8001096:	2304      	movs	r3, #4
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 800109a:	2303      	movs	r3, #3
 800109c:	e004      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 800109e:	2302      	movs	r3, #2
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x228>
 80010a6:	2300      	movs	r3, #0
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	f002 0203 	and.w	r2, r2, #3
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	4093      	lsls	r3, r2
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b8:	4935      	ldr	r1, [pc, #212]	@ (8001190 <HAL_GPIO_Init+0x310>)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c6:	4b3b      	ldr	r3, [pc, #236]	@ (80011b4 <HAL_GPIO_Init+0x334>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ea:	4a32      	ldr	r2, [pc, #200]	@ (80011b4 <HAL_GPIO_Init+0x334>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f0:	4b30      	ldr	r3, [pc, #192]	@ (80011b4 <HAL_GPIO_Init+0x334>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001114:	4a27      	ldr	r2, [pc, #156]	@ (80011b4 <HAL_GPIO_Init+0x334>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800111a:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <HAL_GPIO_Init+0x334>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113e:	4a1d      	ldr	r2, [pc, #116]	@ (80011b4 <HAL_GPIO_Init+0x334>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001144:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <HAL_GPIO_Init+0x334>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001168:	4a12      	ldr	r2, [pc, #72]	@ (80011b4 <HAL_GPIO_Init+0x334>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3301      	adds	r3, #1
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	2b0f      	cmp	r3, #15
 8001178:	f67f ae90 	bls.w	8000e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3724      	adds	r7, #36	@ 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40013800 	.word	0x40013800
 8001194:	40020000 	.word	0x40020000
 8001198:	40020400 	.word	0x40020400
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020c00 	.word	0x40020c00
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40021400 	.word	0x40021400
 80011ac:	40021800 	.word	0x40021800
 80011b0:	40021c00 	.word	0x40021c00
 80011b4:	40013c00 	.word	0x40013c00

080011b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e267      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d075      	beq.n	80012c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011d6:	4b88      	ldr	r3, [pc, #544]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d00c      	beq.n	80011fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e2:	4b85      	ldr	r3, [pc, #532]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d112      	bne.n	8001214 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ee:	4b82      	ldr	r3, [pc, #520]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011fa:	d10b      	bne.n	8001214 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	4b7e      	ldr	r3, [pc, #504]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d05b      	beq.n	80012c0 <HAL_RCC_OscConfig+0x108>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d157      	bne.n	80012c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e242      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800121c:	d106      	bne.n	800122c <HAL_RCC_OscConfig+0x74>
 800121e:	4b76      	ldr	r3, [pc, #472]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a75      	ldr	r2, [pc, #468]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e01d      	b.n	8001268 <HAL_RCC_OscConfig+0xb0>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x98>
 8001236:	4b70      	ldr	r3, [pc, #448]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a6f      	ldr	r2, [pc, #444]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b6d      	ldr	r3, [pc, #436]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a6c      	ldr	r2, [pc, #432]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0xb0>
 8001250:	4b69      	ldr	r3, [pc, #420]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a68      	ldr	r2, [pc, #416]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b66      	ldr	r3, [pc, #408]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a65      	ldr	r2, [pc, #404]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d013      	beq.n	8001298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fc2c 	bl	8000acc <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fc28 	bl	8000acc <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	@ 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e207      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	4b5b      	ldr	r3, [pc, #364]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0xc0>
 8001296:	e014      	b.n	80012c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fc18 	bl	8000acc <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fc14 	bl	8000acc <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	@ 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1f3      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	4b51      	ldr	r3, [pc, #324]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0xe8>
 80012be:	e000      	b.n	80012c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d063      	beq.n	8001396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012ce:	4b4a      	ldr	r3, [pc, #296]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012da:	4b47      	ldr	r3, [pc, #284]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d11c      	bne.n	8001320 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e6:	4b44      	ldr	r3, [pc, #272]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d116      	bne.n	8001320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	4b41      	ldr	r3, [pc, #260]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <HAL_RCC_OscConfig+0x152>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d001      	beq.n	800130a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e1c7      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130a:	4b3b      	ldr	r3, [pc, #236]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4937      	ldr	r1, [pc, #220]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	e03a      	b.n	8001396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d020      	beq.n	800136a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001328:	4b34      	ldr	r3, [pc, #208]	@ (80013fc <HAL_RCC_OscConfig+0x244>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132e:	f7ff fbcd 	bl	8000acc <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001336:	f7ff fbc9 	bl	8000acc <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e1a8      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001348:	4b2b      	ldr	r3, [pc, #172]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b28      	ldr	r3, [pc, #160]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4925      	ldr	r1, [pc, #148]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
 8001368:	e015      	b.n	8001396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136a:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <HAL_RCC_OscConfig+0x244>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fbac 	bl	8000acc <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001378:	f7ff fba8 	bl	8000acc <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e187      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138a:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d036      	beq.n	8001410 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d016      	beq.n	80013d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_RCC_OscConfig+0x248>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b0:	f7ff fb8c 	bl	8000acc <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fb88 	bl	8000acc <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e167      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_RCC_OscConfig+0x240>)
 80013cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x200>
 80013d6:	e01b      	b.n	8001410 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_RCC_OscConfig+0x248>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fb75 	bl	8000acc <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e4:	e00e      	b.n	8001404 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff fb71 	bl	8000acc <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d907      	bls.n	8001404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e150      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
 80013f8:	40023800 	.word	0x40023800
 80013fc:	42470000 	.word	0x42470000
 8001400:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	4b88      	ldr	r3, [pc, #544]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1ea      	bne.n	80013e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 8097 	beq.w	800154c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001422:	4b81      	ldr	r3, [pc, #516]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10f      	bne.n	800144e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b7d      	ldr	r3, [pc, #500]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	4a7c      	ldr	r2, [pc, #496]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	@ 0x40
 800143e:	4b7a      	ldr	r3, [pc, #488]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b77      	ldr	r3, [pc, #476]	@ (800162c <HAL_RCC_OscConfig+0x474>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d118      	bne.n	800148c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145a:	4b74      	ldr	r3, [pc, #464]	@ (800162c <HAL_RCC_OscConfig+0x474>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a73      	ldr	r2, [pc, #460]	@ (800162c <HAL_RCC_OscConfig+0x474>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001466:	f7ff fb31 	bl	8000acc <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146e:	f7ff fb2d 	bl	8000acc <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e10c      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	4b6a      	ldr	r3, [pc, #424]	@ (800162c <HAL_RCC_OscConfig+0x474>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2ea>
 8001494:	4b64      	ldr	r3, [pc, #400]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001498:	4a63      	ldr	r2, [pc, #396]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6713      	str	r3, [r2, #112]	@ 0x70
 80014a0:	e01c      	b.n	80014dc <HAL_RCC_OscConfig+0x324>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x30c>
 80014aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80014b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0x324>
 80014c4:	4b58      	ldr	r3, [pc, #352]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c8:	4a57      	ldr	r2, [pc, #348]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80014d0:	4b55      	ldr	r3, [pc, #340]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d4:	4a54      	ldr	r2, [pc, #336]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80014d6:	f023 0304 	bic.w	r3, r3, #4
 80014da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d015      	beq.n	8001510 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff faf2 	bl	8000acc <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff faee 	bl	8000acc <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0cb      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	4b49      	ldr	r3, [pc, #292]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0ee      	beq.n	80014ec <HAL_RCC_OscConfig+0x334>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff fadc 	bl	8000acc <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001516:	e00a      	b.n	800152e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff fad8 	bl	8000acc <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e0b5      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152e:	4b3e      	ldr	r3, [pc, #248]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1ee      	bne.n	8001518 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001540:	4b39      	ldr	r3, [pc, #228]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001544:	4a38      	ldr	r2, [pc, #224]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800154a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80a1 	beq.w	8001698 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001556:	4b34      	ldr	r3, [pc, #208]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b08      	cmp	r3, #8
 8001560:	d05c      	beq.n	800161c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d141      	bne.n	80015ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156a:	4b31      	ldr	r3, [pc, #196]	@ (8001630 <HAL_RCC_OscConfig+0x478>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff faac 	bl	8000acc <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff faa8 	bl	8000acc <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e087      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158a:	4b27      	ldr	r3, [pc, #156]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a4:	019b      	lsls	r3, r3, #6
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ac:	085b      	lsrs	r3, r3, #1
 80015ae:	3b01      	subs	r3, #1
 80015b0:	041b      	lsls	r3, r3, #16
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b8:	061b      	lsls	r3, r3, #24
 80015ba:	491b      	ldr	r1, [pc, #108]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <HAL_RCC_OscConfig+0x478>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fa81 	bl	8000acc <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fa7d 	bl	8000acc <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e05c      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x416>
 80015ec:	e054      	b.n	8001698 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <HAL_RCC_OscConfig+0x478>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fa6a 	bl	8000acc <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff fa66 	bl	8000acc <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e045      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_RCC_OscConfig+0x470>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x444>
 800161a:	e03d      	b.n	8001698 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d107      	bne.n	8001634 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e038      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000
 8001630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <HAL_RCC_OscConfig+0x4ec>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d028      	beq.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d121      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d11a      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001664:	4013      	ands	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800166a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800166c:	4293      	cmp	r3, r2
 800166e:	d111      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167a:	085b      	lsrs	r3, r3, #1
 800167c:	3b01      	subs	r3, #1
 800167e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001680:	429a      	cmp	r2, r3
 8001682:	d107      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0cc      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016bc:	4b68      	ldr	r3, [pc, #416]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d90c      	bls.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b65      	ldr	r3, [pc, #404]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b63      	ldr	r3, [pc, #396]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0b8      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016fc:	4b59      	ldr	r3, [pc, #356]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a58      	ldr	r2, [pc, #352]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001706:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001714:	4b53      	ldr	r3, [pc, #332]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a52      	ldr	r2, [pc, #328]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800171e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001720:	4b50      	ldr	r3, [pc, #320]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	494d      	ldr	r1, [pc, #308]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	4313      	orrs	r3, r2
 8001730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d044      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b47      	ldr	r3, [pc, #284]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d119      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e07f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d003      	beq.n	8001766 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001762:	2b03      	cmp	r3, #3
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b3f      	ldr	r3, [pc, #252]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001776:	4b3b      	ldr	r3, [pc, #236]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e067      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001786:	4b37      	ldr	r3, [pc, #220]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f023 0203 	bic.w	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4934      	ldr	r1, [pc, #208]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	4313      	orrs	r3, r2
 8001796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001798:	f7ff f998 	bl	8000acc <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a0:	f7ff f994 	bl	8000acc <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e04f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 020c 	and.w	r2, r3, #12
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d1eb      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c8:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d20c      	bcs.n	80017f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e032      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017fc:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4916      	ldr	r1, [pc, #88]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800181a:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	490e      	ldr	r1, [pc, #56]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800182e:	f000 f821 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8001832:	4602      	mov	r2, r0
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	490a      	ldr	r1, [pc, #40]	@ (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	5ccb      	ldrb	r3, [r1, r3]
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	4a09      	ldr	r2, [pc, #36]	@ (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff f8f8 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023c00 	.word	0x40023c00
 8001864:	40023800 	.word	0x40023800
 8001868:	08003484 	.word	0x08003484
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001878:	b094      	sub	sp, #80	@ 0x50
 800187a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800188c:	4b79      	ldr	r3, [pc, #484]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x200>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d00d      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x40>
 8001898:	2b08      	cmp	r3, #8
 800189a:	f200 80e1 	bhi.w	8001a60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x34>
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d003      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x3a>
 80018a6:	e0db      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b73      	ldr	r3, [pc, #460]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x204>)
 80018aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018ac:	e0db      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ae:	4b73      	ldr	r3, [pc, #460]	@ (8001a7c <HAL_RCC_GetSysClockFreq+0x208>)
 80018b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018b2:	e0d8      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018be:	4b6d      	ldr	r3, [pc, #436]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d063      	beq.n	8001992 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	2200      	movs	r2, #0
 80018d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80018e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018e6:	4622      	mov	r2, r4
 80018e8:	462b      	mov	r3, r5
 80018ea:	f04f 0000 	mov.w	r0, #0
 80018ee:	f04f 0100 	mov.w	r1, #0
 80018f2:	0159      	lsls	r1, r3, #5
 80018f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f8:	0150      	lsls	r0, r2, #5
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4621      	mov	r1, r4
 8001900:	1a51      	subs	r1, r2, r1
 8001902:	6139      	str	r1, [r7, #16]
 8001904:	4629      	mov	r1, r5
 8001906:	eb63 0301 	sbc.w	r3, r3, r1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001918:	4659      	mov	r1, fp
 800191a:	018b      	lsls	r3, r1, #6
 800191c:	4651      	mov	r1, sl
 800191e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001922:	4651      	mov	r1, sl
 8001924:	018a      	lsls	r2, r1, #6
 8001926:	4651      	mov	r1, sl
 8001928:	ebb2 0801 	subs.w	r8, r2, r1
 800192c:	4659      	mov	r1, fp
 800192e:	eb63 0901 	sbc.w	r9, r3, r1
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800193e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001946:	4690      	mov	r8, r2
 8001948:	4699      	mov	r9, r3
 800194a:	4623      	mov	r3, r4
 800194c:	eb18 0303 	adds.w	r3, r8, r3
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	462b      	mov	r3, r5
 8001954:	eb49 0303 	adc.w	r3, r9, r3
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001966:	4629      	mov	r1, r5
 8001968:	024b      	lsls	r3, r1, #9
 800196a:	4621      	mov	r1, r4
 800196c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001970:	4621      	mov	r1, r4
 8001972:	024a      	lsls	r2, r1, #9
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800197a:	2200      	movs	r2, #0
 800197c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800197e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001984:	f7fe fc7c 	bl	8000280 <__aeabi_uldivmod>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4613      	mov	r3, r2
 800198e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001990:	e058      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001992:	4b38      	ldr	r3, [pc, #224]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	099b      	lsrs	r3, r3, #6
 8001998:	2200      	movs	r2, #0
 800199a:	4618      	mov	r0, r3
 800199c:	4611      	mov	r1, r2
 800199e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019a2:	623b      	str	r3, [r7, #32]
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019ac:	4642      	mov	r2, r8
 80019ae:	464b      	mov	r3, r9
 80019b0:	f04f 0000 	mov.w	r0, #0
 80019b4:	f04f 0100 	mov.w	r1, #0
 80019b8:	0159      	lsls	r1, r3, #5
 80019ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019be:	0150      	lsls	r0, r2, #5
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4641      	mov	r1, r8
 80019c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ca:	4649      	mov	r1, r9
 80019cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019e4:	ebb2 040a 	subs.w	r4, r2, sl
 80019e8:	eb63 050b 	sbc.w	r5, r3, fp
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	00eb      	lsls	r3, r5, #3
 80019f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019fa:	00e2      	lsls	r2, r4, #3
 80019fc:	4614      	mov	r4, r2
 80019fe:	461d      	mov	r5, r3
 8001a00:	4643      	mov	r3, r8
 8001a02:	18e3      	adds	r3, r4, r3
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	464b      	mov	r3, r9
 8001a08:	eb45 0303 	adc.w	r3, r5, r3
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	028b      	lsls	r3, r1, #10
 8001a1e:	4621      	mov	r1, r4
 8001a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a24:	4621      	mov	r1, r4
 8001a26:	028a      	lsls	r2, r1, #10
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	61fa      	str	r2, [r7, #28]
 8001a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a38:	f7fe fc22 	bl	8000280 <__aeabi_uldivmod>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4613      	mov	r3, r2
 8001a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a44:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	0c1b      	lsrs	r3, r3, #16
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a5e:	e002      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3750      	adds	r7, #80	@ 0x50
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	00f42400 	.word	0x00f42400
 8001a7c:	007a1200 	.word	0x007a1200

08001a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a84:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000

08001a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a9c:	f7ff fff0 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0a9b      	lsrs	r3, r3, #10
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4903      	ldr	r1, [pc, #12]	@ (8001abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aae:	5ccb      	ldrb	r3, [r1, r3]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08003494 	.word	0x08003494

08001ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ac4:	f7ff ffdc 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	0b5b      	lsrs	r3, r3, #13
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	@ (8001ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	08003494 	.word	0x08003494

08001ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e042      	b.n	8001b80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d106      	bne.n	8001b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7fe febc 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2224      	movs	r2, #36	@ 0x24
 8001b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fd69 	bl	8002604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	d175      	bne.n	8001c94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_UART_Transmit+0x2c>
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e06e      	b.n	8001c96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2221      	movs	r2, #33	@ 0x21
 8001bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bc6:	f7fe ff81 	bl	8000acc <HAL_GetTick>
 8001bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	88fa      	ldrh	r2, [r7, #6]
 8001bd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	88fa      	ldrh	r2, [r7, #6]
 8001bd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001be0:	d108      	bne.n	8001bf4 <HAL_UART_Transmit+0x6c>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d104      	bne.n	8001bf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	e003      	b.n	8001bfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001bfc:	e02e      	b.n	8001c5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2200      	movs	r2, #0
 8001c06:	2180      	movs	r1, #128	@ 0x80
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 fb05 	bl	8002218 <UART_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e03a      	b.n	8001c96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10b      	bne.n	8001c3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	e007      	b.n	8001c4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1cb      	bne.n	8001bfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2140      	movs	r1, #64	@ 0x40
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 fad1 	bl	8002218 <UART_WaitOnFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e006      	b.n	8001c96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e000      	b.n	8001c96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
  }
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10f      	bne.n	8001d06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_UART_IRQHandler+0x66>
 8001cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fbc2 	bl	8002488 <UART_Receive_IT>
      return;
 8001d04:	e25b      	b.n	80021be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80de 	beq.w	8001ecc <HAL_UART_IRQHandler+0x22c>
 8001d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d106      	bne.n	8001d2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d20:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80d1 	beq.w	8001ecc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <HAL_UART_IRQHandler+0xae>
 8001d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <HAL_UART_IRQHandler+0xd2>
 8001d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f043 0202 	orr.w	r2, r3, #2
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_UART_IRQHandler+0xf6>
 8001d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	f043 0204 	orr.w	r2, r3, #4
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d011      	beq.n	8001dc6 <HAL_UART_IRQHandler+0x126>
 8001da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	f043 0208 	orr.w	r2, r3, #8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 81f2 	beq.w	80021b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_UART_IRQHandler+0x14e>
 8001ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fb4d 	bl	8002488 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df8:	2b40      	cmp	r3, #64	@ 0x40
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d103      	bne.n	8001e1a <HAL_UART_IRQHandler+0x17a>
 8001e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d04f      	beq.n	8001eba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fa55 	bl	80022ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e2a:	2b40      	cmp	r3, #64	@ 0x40
 8001e2c:	d141      	bne.n	8001eb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3314      	adds	r3, #20
 8001e34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e3c:	e853 3f00 	ldrex	r3, [r3]
 8001e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3314      	adds	r3, #20
 8001e56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001e5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001e66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001e6a:	e841 2300 	strex	r3, r2, [r1]
 8001e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1d9      	bne.n	8001e2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d013      	beq.n	8001eaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e86:	4a7e      	ldr	r2, [pc, #504]	@ (8002080 <HAL_UART_IRQHandler+0x3e0>)
 8001e88:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe ffd3 	bl	8000e3a <HAL_DMA_Abort_IT>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d016      	beq.n	8001ec8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea8:	e00e      	b.n	8001ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f99e 	bl	80021ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb0:	e00a      	b.n	8001ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f99a 	bl	80021ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb8:	e006      	b.n	8001ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f996 	bl	80021ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001ec6:	e175      	b.n	80021b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec8:	bf00      	nop
    return;
 8001eca:	e173      	b.n	80021b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	f040 814f 	bne.w	8002174 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8148 	beq.w	8002174 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 8141 	beq.w	8002174 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f12:	2b40      	cmp	r3, #64	@ 0x40
 8001f14:	f040 80b6 	bne.w	8002084 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 8145 	beq.w	80021b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f36:	429a      	cmp	r2, r3
 8001f38:	f080 813e 	bcs.w	80021b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f42:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f4e:	f000 8088 	beq.w	8002062 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	330c      	adds	r3, #12
 8001f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f60:	e853 3f00 	ldrex	r3, [r3]
 8001f64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	330c      	adds	r3, #12
 8001f7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001f7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001f82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001f8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001f8e:	e841 2300 	strex	r3, r2, [r1]
 8001f92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1d9      	bne.n	8001f52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3314      	adds	r3, #20
 8001fa4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fa8:	e853 3f00 	ldrex	r3, [r3]
 8001fac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001fae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3314      	adds	r3, #20
 8001fbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fc2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001fc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001fca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001fce:	e841 2300 	strex	r3, r2, [r1]
 8001fd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001fd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1e1      	bne.n	8001f9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3314      	adds	r3, #20
 8001fe0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fe4:	e853 3f00 	ldrex	r3, [r3]
 8001fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3314      	adds	r3, #20
 8001ffa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001ffe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002000:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002002:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002004:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002006:	e841 2300 	strex	r3, r2, [r1]
 800200a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800200c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1e3      	bne.n	8001fda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	330c      	adds	r3, #12
 8002026:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800202a:	e853 3f00 	ldrex	r3, [r3]
 800202e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002032:	f023 0310 	bic.w	r3, r3, #16
 8002036:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	330c      	adds	r3, #12
 8002040:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002044:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002046:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002048:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800204a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800204c:	e841 2300 	strex	r3, r2, [r1]
 8002050:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e3      	bne.n	8002020 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fe7c 	bl	8000d5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2202      	movs	r2, #2
 8002066:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002070:	b29b      	uxth	r3, r3
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	b29b      	uxth	r3, r3
 8002076:	4619      	mov	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f8c1 	bl	8002200 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800207e:	e09b      	b.n	80021b8 <HAL_UART_IRQHandler+0x518>
 8002080:	08002391 	.word	0x08002391
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800208c:	b29b      	uxth	r3, r3
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 808e 	beq.w	80021bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80020a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8089 	beq.w	80021bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	330c      	adds	r3, #12
 80020b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b4:	e853 3f00 	ldrex	r3, [r3]
 80020b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80020ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	330c      	adds	r3, #12
 80020ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80020ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80020d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80020d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020d6:	e841 2300 	strex	r3, r2, [r1]
 80020da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80020dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1e3      	bne.n	80020aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3314      	adds	r3, #20
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	e853 3f00 	ldrex	r3, [r3]
 80020f0:	623b      	str	r3, [r7, #32]
   return(result);
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3314      	adds	r3, #20
 8002102:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002106:	633a      	str	r2, [r7, #48]	@ 0x30
 8002108:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800210a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800210c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800210e:	e841 2300 	strex	r3, r2, [r1]
 8002112:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1e3      	bne.n	80020e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	330c      	adds	r3, #12
 800212e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	e853 3f00 	ldrex	r3, [r3]
 8002136:	60fb      	str	r3, [r7, #12]
   return(result);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f023 0310 	bic.w	r3, r3, #16
 800213e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	330c      	adds	r3, #12
 8002148:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800214c:	61fa      	str	r2, [r7, #28]
 800214e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002150:	69b9      	ldr	r1, [r7, #24]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	e841 2300 	strex	r3, r2, [r1]
 8002158:	617b      	str	r3, [r7, #20]
   return(result);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e3      	bne.n	8002128 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002166:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800216a:	4619      	mov	r1, r3
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f847 	bl	8002200 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002172:	e023      	b.n	80021bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217c:	2b00      	cmp	r3, #0
 800217e:	d009      	beq.n	8002194 <HAL_UART_IRQHandler+0x4f4>
 8002180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f913 	bl	80023b8 <UART_Transmit_IT>
    return;
 8002192:	e014      	b.n	80021be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00e      	beq.n	80021be <HAL_UART_IRQHandler+0x51e>
 80021a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f953 	bl	8002458 <UART_EndTransmit_IT>
    return;
 80021b2:	e004      	b.n	80021be <HAL_UART_IRQHandler+0x51e>
    return;
 80021b4:	bf00      	nop
 80021b6:	e002      	b.n	80021be <HAL_UART_IRQHandler+0x51e>
      return;
 80021b8:	bf00      	nop
 80021ba:	e000      	b.n	80021be <HAL_UART_IRQHandler+0x51e>
      return;
 80021bc:	bf00      	nop
  }
}
 80021be:	37e8      	adds	r7, #232	@ 0xe8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002228:	e03b      	b.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d037      	beq.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002232:	f7fe fc4b 	bl	8000acc <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	6a3a      	ldr	r2, [r7, #32]
 800223e:	429a      	cmp	r2, r3
 8002240:	d302      	bcc.n	8002248 <UART_WaitOnFlagUntilTimeout+0x30>
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e03a      	b.n	80022c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d023      	beq.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b80      	cmp	r3, #128	@ 0x80
 800225e:	d020      	beq.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b40      	cmp	r3, #64	@ 0x40
 8002264:	d01d      	beq.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b08      	cmp	r3, #8
 8002272:	d116      	bne.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f81d 	bl	80022ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2208      	movs	r2, #8
 8002294:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e00f      	b.n	80022c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4013      	ands	r3, r2
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d0b4      	beq.n	800222a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b095      	sub	sp, #84	@ 0x54
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	330c      	adds	r3, #12
 80022d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022dc:	e853 3f00 	ldrex	r3, [r3]
 80022e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	330c      	adds	r3, #12
 80022f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80022f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022fa:	e841 2300 	strex	r3, r2, [r1]
 80022fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1e5      	bne.n	80022d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3314      	adds	r3, #20
 800230c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	e853 3f00 	ldrex	r3, [r3]
 8002314:	61fb      	str	r3, [r7, #28]
   return(result);
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3314      	adds	r3, #20
 8002324:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002328:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800232c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800232e:	e841 2300 	strex	r3, r2, [r1]
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e5      	bne.n	8002306 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	2b01      	cmp	r3, #1
 8002340:	d119      	bne.n	8002376 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	330c      	adds	r3, #12
 8002348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	e853 3f00 	ldrex	r3, [r3]
 8002350:	60bb      	str	r3, [r7, #8]
   return(result);
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f023 0310 	bic.w	r3, r3, #16
 8002358:	647b      	str	r3, [r7, #68]	@ 0x44
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	330c      	adds	r3, #12
 8002360:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002362:	61ba      	str	r2, [r7, #24]
 8002364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002366:	6979      	ldr	r1, [r7, #20]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	e841 2300 	strex	r3, r2, [r1]
 800236e:	613b      	str	r3, [r7, #16]
   return(result);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1e5      	bne.n	8002342 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002384:	bf00      	nop
 8002386:	3754      	adds	r7, #84	@ 0x54
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800239c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f7ff ff1e 	bl	80021ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b21      	cmp	r3, #33	@ 0x21
 80023ca:	d13e      	bne.n	800244a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023d4:	d114      	bne.n	8002400 <UART_Transmit_IT+0x48>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d110      	bne.n	8002400 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	1c9a      	adds	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	621a      	str	r2, [r3, #32]
 80023fe:	e008      	b.n	8002412 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	1c59      	adds	r1, r3, #1
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6211      	str	r1, [r2, #32]
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29b      	uxth	r3, r3
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	4619      	mov	r1, r3
 8002420:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10f      	bne.n	8002446 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002434:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002444:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	e000      	b.n	800244c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800244a:	2302      	movs	r3, #2
  }
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800246e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff fea3 	bl	80021c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	@ 0x30
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b22      	cmp	r3, #34	@ 0x22
 800249a:	f040 80ae 	bne.w	80025fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024a6:	d117      	bne.n	80024d8 <UART_Receive_IT+0x50>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d113      	bne.n	80024d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d0:	1c9a      	adds	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80024d6:	e026      	b.n	8002526 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024ea:	d007      	beq.n	80024fc <UART_Receive_IT+0x74>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <UART_Receive_IT+0x82>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d106      	bne.n	800250a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	e008      	b.n	800251c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002516:	b2da      	uxtb	r2, r3
 8002518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800251a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29b      	uxth	r3, r3
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4619      	mov	r1, r3
 8002534:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002536:	2b00      	cmp	r3, #0
 8002538:	d15d      	bne.n	80025f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0220 	bic.w	r2, r2, #32
 8002548:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002558:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	2b01      	cmp	r3, #1
 800257e:	d135      	bne.n	80025ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	330c      	adds	r3, #12
 800258c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	e853 3f00 	ldrex	r3, [r3]
 8002594:	613b      	str	r3, [r7, #16]
   return(result);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f023 0310 	bic.w	r3, r3, #16
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	330c      	adds	r3, #12
 80025a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a6:	623a      	str	r2, [r7, #32]
 80025a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025aa:	69f9      	ldr	r1, [r7, #28]
 80025ac:	6a3a      	ldr	r2, [r7, #32]
 80025ae:	e841 2300 	strex	r3, r2, [r1]
 80025b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1e5      	bne.n	8002586 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b10      	cmp	r3, #16
 80025c6:	d10a      	bne.n	80025de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025e2:	4619      	mov	r1, r3
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff fe0b 	bl	8002200 <HAL_UARTEx_RxEventCallback>
 80025ea:	e002      	b.n	80025f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff fdf3 	bl	80021d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e002      	b.n	80025fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
  }
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3730      	adds	r7, #48	@ 0x30
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002608:	b0c0      	sub	sp, #256	@ 0x100
 800260a:	af00      	add	r7, sp, #0
 800260c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002620:	68d9      	ldr	r1, [r3, #12]
 8002622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	ea40 0301 	orr.w	r3, r0, r1
 800262c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800262e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	431a      	orrs	r2, r3
 800263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	431a      	orrs	r2, r3
 8002644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800265c:	f021 010c 	bic.w	r1, r1, #12
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800266a:	430b      	orrs	r3, r1
 800266c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800266e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800267a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800267e:	6999      	ldr	r1, [r3, #24]
 8002680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	ea40 0301 	orr.w	r3, r0, r1
 800268a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b8f      	ldr	r3, [pc, #572]	@ (80028d0 <UART_SetConfig+0x2cc>)
 8002694:	429a      	cmp	r2, r3
 8002696:	d005      	beq.n	80026a4 <UART_SetConfig+0xa0>
 8002698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	4b8d      	ldr	r3, [pc, #564]	@ (80028d4 <UART_SetConfig+0x2d0>)
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d104      	bne.n	80026ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026a4:	f7ff fa0c 	bl	8001ac0 <HAL_RCC_GetPCLK2Freq>
 80026a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80026ac:	e003      	b.n	80026b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026ae:	f7ff f9f3 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 80026b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026c0:	f040 810c 	bne.w	80028dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026c8:	2200      	movs	r2, #0
 80026ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80026ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80026d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80026d6:	4622      	mov	r2, r4
 80026d8:	462b      	mov	r3, r5
 80026da:	1891      	adds	r1, r2, r2
 80026dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026de:	415b      	adcs	r3, r3
 80026e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026e6:	4621      	mov	r1, r4
 80026e8:	eb12 0801 	adds.w	r8, r2, r1
 80026ec:	4629      	mov	r1, r5
 80026ee:	eb43 0901 	adc.w	r9, r3, r1
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002706:	4690      	mov	r8, r2
 8002708:	4699      	mov	r9, r3
 800270a:	4623      	mov	r3, r4
 800270c:	eb18 0303 	adds.w	r3, r8, r3
 8002710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002714:	462b      	mov	r3, r5
 8002716:	eb49 0303 	adc.w	r3, r9, r3
 800271a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800271e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800272a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800272e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002732:	460b      	mov	r3, r1
 8002734:	18db      	adds	r3, r3, r3
 8002736:	653b      	str	r3, [r7, #80]	@ 0x50
 8002738:	4613      	mov	r3, r2
 800273a:	eb42 0303 	adc.w	r3, r2, r3
 800273e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002748:	f7fd fd9a 	bl	8000280 <__aeabi_uldivmod>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4b61      	ldr	r3, [pc, #388]	@ (80028d8 <UART_SetConfig+0x2d4>)
 8002752:	fba3 2302 	umull	r2, r3, r3, r2
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	011c      	lsls	r4, r3, #4
 800275a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800275e:	2200      	movs	r2, #0
 8002760:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002764:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800276c:	4642      	mov	r2, r8
 800276e:	464b      	mov	r3, r9
 8002770:	1891      	adds	r1, r2, r2
 8002772:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002774:	415b      	adcs	r3, r3
 8002776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800277c:	4641      	mov	r1, r8
 800277e:	eb12 0a01 	adds.w	sl, r2, r1
 8002782:	4649      	mov	r1, r9
 8002784:	eb43 0b01 	adc.w	fp, r3, r1
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800279c:	4692      	mov	sl, r2
 800279e:	469b      	mov	fp, r3
 80027a0:	4643      	mov	r3, r8
 80027a2:	eb1a 0303 	adds.w	r3, sl, r3
 80027a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027aa:	464b      	mov	r3, r9
 80027ac:	eb4b 0303 	adc.w	r3, fp, r3
 80027b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80027c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80027c8:	460b      	mov	r3, r1
 80027ca:	18db      	adds	r3, r3, r3
 80027cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80027ce:	4613      	mov	r3, r2
 80027d0:	eb42 0303 	adc.w	r3, r2, r3
 80027d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80027d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80027de:	f7fd fd4f 	bl	8000280 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	4b3b      	ldr	r3, [pc, #236]	@ (80028d8 <UART_SetConfig+0x2d4>)
 80027ea:	fba3 2301 	umull	r2, r3, r3, r1
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2264      	movs	r2, #100	@ 0x64
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	1acb      	subs	r3, r1, r3
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027fe:	4b36      	ldr	r3, [pc, #216]	@ (80028d8 <UART_SetConfig+0x2d4>)
 8002800:	fba3 2302 	umull	r2, r3, r3, r2
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800280c:	441c      	add	r4, r3
 800280e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002812:	2200      	movs	r2, #0
 8002814:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002818:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800281c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002820:	4642      	mov	r2, r8
 8002822:	464b      	mov	r3, r9
 8002824:	1891      	adds	r1, r2, r2
 8002826:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002828:	415b      	adcs	r3, r3
 800282a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800282c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002830:	4641      	mov	r1, r8
 8002832:	1851      	adds	r1, r2, r1
 8002834:	6339      	str	r1, [r7, #48]	@ 0x30
 8002836:	4649      	mov	r1, r9
 8002838:	414b      	adcs	r3, r1
 800283a:	637b      	str	r3, [r7, #52]	@ 0x34
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002848:	4659      	mov	r1, fp
 800284a:	00cb      	lsls	r3, r1, #3
 800284c:	4651      	mov	r1, sl
 800284e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002852:	4651      	mov	r1, sl
 8002854:	00ca      	lsls	r2, r1, #3
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	4603      	mov	r3, r0
 800285c:	4642      	mov	r2, r8
 800285e:	189b      	adds	r3, r3, r2
 8002860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002864:	464b      	mov	r3, r9
 8002866:	460a      	mov	r2, r1
 8002868:	eb42 0303 	adc.w	r3, r2, r3
 800286c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800287c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002884:	460b      	mov	r3, r1
 8002886:	18db      	adds	r3, r3, r3
 8002888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800288a:	4613      	mov	r3, r2
 800288c:	eb42 0303 	adc.w	r3, r2, r3
 8002890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800289a:	f7fd fcf1 	bl	8000280 <__aeabi_uldivmod>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4b0d      	ldr	r3, [pc, #52]	@ (80028d8 <UART_SetConfig+0x2d4>)
 80028a4:	fba3 1302 	umull	r1, r3, r3, r2
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	2164      	movs	r1, #100	@ 0x64
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	3332      	adds	r3, #50	@ 0x32
 80028b6:	4a08      	ldr	r2, [pc, #32]	@ (80028d8 <UART_SetConfig+0x2d4>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	f003 0207 	and.w	r2, r3, #7
 80028c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4422      	add	r2, r4
 80028ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028cc:	e106      	b.n	8002adc <UART_SetConfig+0x4d8>
 80028ce:	bf00      	nop
 80028d0:	40011000 	.word	0x40011000
 80028d4:	40011400 	.word	0x40011400
 80028d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028e0:	2200      	movs	r2, #0
 80028e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028ee:	4642      	mov	r2, r8
 80028f0:	464b      	mov	r3, r9
 80028f2:	1891      	adds	r1, r2, r2
 80028f4:	6239      	str	r1, [r7, #32]
 80028f6:	415b      	adcs	r3, r3
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028fe:	4641      	mov	r1, r8
 8002900:	1854      	adds	r4, r2, r1
 8002902:	4649      	mov	r1, r9
 8002904:	eb43 0501 	adc.w	r5, r3, r1
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	00eb      	lsls	r3, r5, #3
 8002912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002916:	00e2      	lsls	r2, r4, #3
 8002918:	4614      	mov	r4, r2
 800291a:	461d      	mov	r5, r3
 800291c:	4643      	mov	r3, r8
 800291e:	18e3      	adds	r3, r4, r3
 8002920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002924:	464b      	mov	r3, r9
 8002926:	eb45 0303 	adc.w	r3, r5, r3
 800292a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800293a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800294a:	4629      	mov	r1, r5
 800294c:	008b      	lsls	r3, r1, #2
 800294e:	4621      	mov	r1, r4
 8002950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002954:	4621      	mov	r1, r4
 8002956:	008a      	lsls	r2, r1, #2
 8002958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800295c:	f7fd fc90 	bl	8000280 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4b60      	ldr	r3, [pc, #384]	@ (8002ae8 <UART_SetConfig+0x4e4>)
 8002966:	fba3 2302 	umull	r2, r3, r3, r2
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	011c      	lsls	r4, r3, #4
 800296e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002972:	2200      	movs	r2, #0
 8002974:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002978:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800297c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002980:	4642      	mov	r2, r8
 8002982:	464b      	mov	r3, r9
 8002984:	1891      	adds	r1, r2, r2
 8002986:	61b9      	str	r1, [r7, #24]
 8002988:	415b      	adcs	r3, r3
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002990:	4641      	mov	r1, r8
 8002992:	1851      	adds	r1, r2, r1
 8002994:	6139      	str	r1, [r7, #16]
 8002996:	4649      	mov	r1, r9
 8002998:	414b      	adcs	r3, r1
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029a8:	4659      	mov	r1, fp
 80029aa:	00cb      	lsls	r3, r1, #3
 80029ac:	4651      	mov	r1, sl
 80029ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029b2:	4651      	mov	r1, sl
 80029b4:	00ca      	lsls	r2, r1, #3
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	4642      	mov	r2, r8
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029c4:	464b      	mov	r3, r9
 80029c6:	460a      	mov	r2, r1
 80029c8:	eb42 0303 	adc.w	r3, r2, r3
 80029cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80029e8:	4649      	mov	r1, r9
 80029ea:	008b      	lsls	r3, r1, #2
 80029ec:	4641      	mov	r1, r8
 80029ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029f2:	4641      	mov	r1, r8
 80029f4:	008a      	lsls	r2, r1, #2
 80029f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029fa:	f7fd fc41 	bl	8000280 <__aeabi_uldivmod>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	4b38      	ldr	r3, [pc, #224]	@ (8002ae8 <UART_SetConfig+0x4e4>)
 8002a06:	fba3 2301 	umull	r2, r3, r3, r1
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	2264      	movs	r2, #100	@ 0x64
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	1acb      	subs	r3, r1, r3
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	3332      	adds	r3, #50	@ 0x32
 8002a18:	4a33      	ldr	r2, [pc, #204]	@ (8002ae8 <UART_SetConfig+0x4e4>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a24:	441c      	add	r4, r3
 8002a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a34:	4642      	mov	r2, r8
 8002a36:	464b      	mov	r3, r9
 8002a38:	1891      	adds	r1, r2, r2
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	415b      	adcs	r3, r3
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a44:	4641      	mov	r1, r8
 8002a46:	1851      	adds	r1, r2, r1
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	4649      	mov	r1, r9
 8002a4c:	414b      	adcs	r3, r1
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	00cb      	lsls	r3, r1, #3
 8002a60:	4651      	mov	r1, sl
 8002a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a66:	4651      	mov	r1, sl
 8002a68:	00ca      	lsls	r2, r1, #3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4642      	mov	r2, r8
 8002a72:	189b      	adds	r3, r3, r2
 8002a74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a76:	464b      	mov	r3, r9
 8002a78:	460a      	mov	r2, r1
 8002a7a:	eb42 0303 	adc.w	r3, r2, r3
 8002a7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a98:	4649      	mov	r1, r9
 8002a9a:	008b      	lsls	r3, r1, #2
 8002a9c:	4641      	mov	r1, r8
 8002a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aa2:	4641      	mov	r1, r8
 8002aa4:	008a      	lsls	r2, r1, #2
 8002aa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002aaa:	f7fd fbe9 	bl	8000280 <__aeabi_uldivmod>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae8 <UART_SetConfig+0x4e4>)
 8002ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	2164      	movs	r1, #100	@ 0x64
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	3332      	adds	r3, #50	@ 0x32
 8002ac6:	4a08      	ldr	r2, [pc, #32]	@ (8002ae8 <UART_SetConfig+0x4e4>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	f003 020f 	and.w	r2, r3, #15
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4422      	add	r2, r4
 8002ada:	609a      	str	r2, [r3, #8]
}
 8002adc:	bf00      	nop
 8002ade:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae8:	51eb851f 	.word	0x51eb851f

08002aec <siprintf>:
 8002aec:	b40e      	push	{r1, r2, r3}
 8002aee:	b500      	push	{lr}
 8002af0:	b09c      	sub	sp, #112	@ 0x70
 8002af2:	ab1d      	add	r3, sp, #116	@ 0x74
 8002af4:	9002      	str	r0, [sp, #8]
 8002af6:	9006      	str	r0, [sp, #24]
 8002af8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002afc:	4809      	ldr	r0, [pc, #36]	@ (8002b24 <siprintf+0x38>)
 8002afe:	9107      	str	r1, [sp, #28]
 8002b00:	9104      	str	r1, [sp, #16]
 8002b02:	4909      	ldr	r1, [pc, #36]	@ (8002b28 <siprintf+0x3c>)
 8002b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b08:	9105      	str	r1, [sp, #20]
 8002b0a:	6800      	ldr	r0, [r0, #0]
 8002b0c:	9301      	str	r3, [sp, #4]
 8002b0e:	a902      	add	r1, sp, #8
 8002b10:	f000 f994 	bl	8002e3c <_svfiprintf_r>
 8002b14:	9b02      	ldr	r3, [sp, #8]
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
 8002b1a:	b01c      	add	sp, #112	@ 0x70
 8002b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b20:	b003      	add	sp, #12
 8002b22:	4770      	bx	lr
 8002b24:	2000000c 	.word	0x2000000c
 8002b28:	ffff0208 	.word	0xffff0208

08002b2c <memset>:
 8002b2c:	4402      	add	r2, r0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d100      	bne.n	8002b36 <memset+0xa>
 8002b34:	4770      	bx	lr
 8002b36:	f803 1b01 	strb.w	r1, [r3], #1
 8002b3a:	e7f9      	b.n	8002b30 <memset+0x4>

08002b3c <__errno>:
 8002b3c:	4b01      	ldr	r3, [pc, #4]	@ (8002b44 <__errno+0x8>)
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	2000000c 	.word	0x2000000c

08002b48 <__libc_init_array>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8002b80 <__libc_init_array+0x38>)
 8002b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8002b84 <__libc_init_array+0x3c>)
 8002b4e:	1b64      	subs	r4, r4, r5
 8002b50:	10a4      	asrs	r4, r4, #2
 8002b52:	2600      	movs	r6, #0
 8002b54:	42a6      	cmp	r6, r4
 8002b56:	d109      	bne.n	8002b6c <__libc_init_array+0x24>
 8002b58:	4d0b      	ldr	r5, [pc, #44]	@ (8002b88 <__libc_init_array+0x40>)
 8002b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8002b8c <__libc_init_array+0x44>)
 8002b5c:	f000 fc66 	bl	800342c <_init>
 8002b60:	1b64      	subs	r4, r4, r5
 8002b62:	10a4      	asrs	r4, r4, #2
 8002b64:	2600      	movs	r6, #0
 8002b66:	42a6      	cmp	r6, r4
 8002b68:	d105      	bne.n	8002b76 <__libc_init_array+0x2e>
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}
 8002b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b70:	4798      	blx	r3
 8002b72:	3601      	adds	r6, #1
 8002b74:	e7ee      	b.n	8002b54 <__libc_init_array+0xc>
 8002b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7a:	4798      	blx	r3
 8002b7c:	3601      	adds	r6, #1
 8002b7e:	e7f2      	b.n	8002b66 <__libc_init_array+0x1e>
 8002b80:	080034d8 	.word	0x080034d8
 8002b84:	080034d8 	.word	0x080034d8
 8002b88:	080034d8 	.word	0x080034d8
 8002b8c:	080034dc 	.word	0x080034dc

08002b90 <__retarget_lock_acquire_recursive>:
 8002b90:	4770      	bx	lr

08002b92 <__retarget_lock_release_recursive>:
 8002b92:	4770      	bx	lr

08002b94 <_free_r>:
 8002b94:	b538      	push	{r3, r4, r5, lr}
 8002b96:	4605      	mov	r5, r0
 8002b98:	2900      	cmp	r1, #0
 8002b9a:	d041      	beq.n	8002c20 <_free_r+0x8c>
 8002b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ba0:	1f0c      	subs	r4, r1, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bfb8      	it	lt
 8002ba6:	18e4      	addlt	r4, r4, r3
 8002ba8:	f000 f8e0 	bl	8002d6c <__malloc_lock>
 8002bac:	4a1d      	ldr	r2, [pc, #116]	@ (8002c24 <_free_r+0x90>)
 8002bae:	6813      	ldr	r3, [r2, #0]
 8002bb0:	b933      	cbnz	r3, 8002bc0 <_free_r+0x2c>
 8002bb2:	6063      	str	r3, [r4, #4]
 8002bb4:	6014      	str	r4, [r2, #0]
 8002bb6:	4628      	mov	r0, r5
 8002bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bbc:	f000 b8dc 	b.w	8002d78 <__malloc_unlock>
 8002bc0:	42a3      	cmp	r3, r4
 8002bc2:	d908      	bls.n	8002bd6 <_free_r+0x42>
 8002bc4:	6820      	ldr	r0, [r4, #0]
 8002bc6:	1821      	adds	r1, r4, r0
 8002bc8:	428b      	cmp	r3, r1
 8002bca:	bf01      	itttt	eq
 8002bcc:	6819      	ldreq	r1, [r3, #0]
 8002bce:	685b      	ldreq	r3, [r3, #4]
 8002bd0:	1809      	addeq	r1, r1, r0
 8002bd2:	6021      	streq	r1, [r4, #0]
 8002bd4:	e7ed      	b.n	8002bb2 <_free_r+0x1e>
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	b10b      	cbz	r3, 8002be0 <_free_r+0x4c>
 8002bdc:	42a3      	cmp	r3, r4
 8002bde:	d9fa      	bls.n	8002bd6 <_free_r+0x42>
 8002be0:	6811      	ldr	r1, [r2, #0]
 8002be2:	1850      	adds	r0, r2, r1
 8002be4:	42a0      	cmp	r0, r4
 8002be6:	d10b      	bne.n	8002c00 <_free_r+0x6c>
 8002be8:	6820      	ldr	r0, [r4, #0]
 8002bea:	4401      	add	r1, r0
 8002bec:	1850      	adds	r0, r2, r1
 8002bee:	4283      	cmp	r3, r0
 8002bf0:	6011      	str	r1, [r2, #0]
 8002bf2:	d1e0      	bne.n	8002bb6 <_free_r+0x22>
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	6053      	str	r3, [r2, #4]
 8002bfa:	4408      	add	r0, r1
 8002bfc:	6010      	str	r0, [r2, #0]
 8002bfe:	e7da      	b.n	8002bb6 <_free_r+0x22>
 8002c00:	d902      	bls.n	8002c08 <_free_r+0x74>
 8002c02:	230c      	movs	r3, #12
 8002c04:	602b      	str	r3, [r5, #0]
 8002c06:	e7d6      	b.n	8002bb6 <_free_r+0x22>
 8002c08:	6820      	ldr	r0, [r4, #0]
 8002c0a:	1821      	adds	r1, r4, r0
 8002c0c:	428b      	cmp	r3, r1
 8002c0e:	bf04      	itt	eq
 8002c10:	6819      	ldreq	r1, [r3, #0]
 8002c12:	685b      	ldreq	r3, [r3, #4]
 8002c14:	6063      	str	r3, [r4, #4]
 8002c16:	bf04      	itt	eq
 8002c18:	1809      	addeq	r1, r1, r0
 8002c1a:	6021      	streq	r1, [r4, #0]
 8002c1c:	6054      	str	r4, [r2, #4]
 8002c1e:	e7ca      	b.n	8002bb6 <_free_r+0x22>
 8002c20:	bd38      	pop	{r3, r4, r5, pc}
 8002c22:	bf00      	nop
 8002c24:	2000020c 	.word	0x2000020c

08002c28 <sbrk_aligned>:
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	4e0f      	ldr	r6, [pc, #60]	@ (8002c68 <sbrk_aligned+0x40>)
 8002c2c:	460c      	mov	r4, r1
 8002c2e:	6831      	ldr	r1, [r6, #0]
 8002c30:	4605      	mov	r5, r0
 8002c32:	b911      	cbnz	r1, 8002c3a <sbrk_aligned+0x12>
 8002c34:	f000 fba6 	bl	8003384 <_sbrk_r>
 8002c38:	6030      	str	r0, [r6, #0]
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f000 fba1 	bl	8003384 <_sbrk_r>
 8002c42:	1c43      	adds	r3, r0, #1
 8002c44:	d103      	bne.n	8002c4e <sbrk_aligned+0x26>
 8002c46:	f04f 34ff 	mov.w	r4, #4294967295
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	bd70      	pop	{r4, r5, r6, pc}
 8002c4e:	1cc4      	adds	r4, r0, #3
 8002c50:	f024 0403 	bic.w	r4, r4, #3
 8002c54:	42a0      	cmp	r0, r4
 8002c56:	d0f8      	beq.n	8002c4a <sbrk_aligned+0x22>
 8002c58:	1a21      	subs	r1, r4, r0
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	f000 fb92 	bl	8003384 <_sbrk_r>
 8002c60:	3001      	adds	r0, #1
 8002c62:	d1f2      	bne.n	8002c4a <sbrk_aligned+0x22>
 8002c64:	e7ef      	b.n	8002c46 <sbrk_aligned+0x1e>
 8002c66:	bf00      	nop
 8002c68:	20000208 	.word	0x20000208

08002c6c <_malloc_r>:
 8002c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c70:	1ccd      	adds	r5, r1, #3
 8002c72:	f025 0503 	bic.w	r5, r5, #3
 8002c76:	3508      	adds	r5, #8
 8002c78:	2d0c      	cmp	r5, #12
 8002c7a:	bf38      	it	cc
 8002c7c:	250c      	movcc	r5, #12
 8002c7e:	2d00      	cmp	r5, #0
 8002c80:	4606      	mov	r6, r0
 8002c82:	db01      	blt.n	8002c88 <_malloc_r+0x1c>
 8002c84:	42a9      	cmp	r1, r5
 8002c86:	d904      	bls.n	8002c92 <_malloc_r+0x26>
 8002c88:	230c      	movs	r3, #12
 8002c8a:	6033      	str	r3, [r6, #0]
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d68 <_malloc_r+0xfc>
 8002c96:	f000 f869 	bl	8002d6c <__malloc_lock>
 8002c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8002c9e:	461c      	mov	r4, r3
 8002ca0:	bb44      	cbnz	r4, 8002cf4 <_malloc_r+0x88>
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	f7ff ffbf 	bl	8002c28 <sbrk_aligned>
 8002caa:	1c43      	adds	r3, r0, #1
 8002cac:	4604      	mov	r4, r0
 8002cae:	d158      	bne.n	8002d62 <_malloc_r+0xf6>
 8002cb0:	f8d8 4000 	ldr.w	r4, [r8]
 8002cb4:	4627      	mov	r7, r4
 8002cb6:	2f00      	cmp	r7, #0
 8002cb8:	d143      	bne.n	8002d42 <_malloc_r+0xd6>
 8002cba:	2c00      	cmp	r4, #0
 8002cbc:	d04b      	beq.n	8002d56 <_malloc_r+0xea>
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	4639      	mov	r1, r7
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	eb04 0903 	add.w	r9, r4, r3
 8002cc8:	f000 fb5c 	bl	8003384 <_sbrk_r>
 8002ccc:	4581      	cmp	r9, r0
 8002cce:	d142      	bne.n	8002d56 <_malloc_r+0xea>
 8002cd0:	6821      	ldr	r1, [r4, #0]
 8002cd2:	1a6d      	subs	r5, r5, r1
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	4630      	mov	r0, r6
 8002cd8:	f7ff ffa6 	bl	8002c28 <sbrk_aligned>
 8002cdc:	3001      	adds	r0, #1
 8002cde:	d03a      	beq.n	8002d56 <_malloc_r+0xea>
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	442b      	add	r3, r5
 8002ce4:	6023      	str	r3, [r4, #0]
 8002ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	bb62      	cbnz	r2, 8002d48 <_malloc_r+0xdc>
 8002cee:	f8c8 7000 	str.w	r7, [r8]
 8002cf2:	e00f      	b.n	8002d14 <_malloc_r+0xa8>
 8002cf4:	6822      	ldr	r2, [r4, #0]
 8002cf6:	1b52      	subs	r2, r2, r5
 8002cf8:	d420      	bmi.n	8002d3c <_malloc_r+0xd0>
 8002cfa:	2a0b      	cmp	r2, #11
 8002cfc:	d917      	bls.n	8002d2e <_malloc_r+0xc2>
 8002cfe:	1961      	adds	r1, r4, r5
 8002d00:	42a3      	cmp	r3, r4
 8002d02:	6025      	str	r5, [r4, #0]
 8002d04:	bf18      	it	ne
 8002d06:	6059      	strne	r1, [r3, #4]
 8002d08:	6863      	ldr	r3, [r4, #4]
 8002d0a:	bf08      	it	eq
 8002d0c:	f8c8 1000 	streq.w	r1, [r8]
 8002d10:	5162      	str	r2, [r4, r5]
 8002d12:	604b      	str	r3, [r1, #4]
 8002d14:	4630      	mov	r0, r6
 8002d16:	f000 f82f 	bl	8002d78 <__malloc_unlock>
 8002d1a:	f104 000b 	add.w	r0, r4, #11
 8002d1e:	1d23      	adds	r3, r4, #4
 8002d20:	f020 0007 	bic.w	r0, r0, #7
 8002d24:	1ac2      	subs	r2, r0, r3
 8002d26:	bf1c      	itt	ne
 8002d28:	1a1b      	subne	r3, r3, r0
 8002d2a:	50a3      	strne	r3, [r4, r2]
 8002d2c:	e7af      	b.n	8002c8e <_malloc_r+0x22>
 8002d2e:	6862      	ldr	r2, [r4, #4]
 8002d30:	42a3      	cmp	r3, r4
 8002d32:	bf0c      	ite	eq
 8002d34:	f8c8 2000 	streq.w	r2, [r8]
 8002d38:	605a      	strne	r2, [r3, #4]
 8002d3a:	e7eb      	b.n	8002d14 <_malloc_r+0xa8>
 8002d3c:	4623      	mov	r3, r4
 8002d3e:	6864      	ldr	r4, [r4, #4]
 8002d40:	e7ae      	b.n	8002ca0 <_malloc_r+0x34>
 8002d42:	463c      	mov	r4, r7
 8002d44:	687f      	ldr	r7, [r7, #4]
 8002d46:	e7b6      	b.n	8002cb6 <_malloc_r+0x4a>
 8002d48:	461a      	mov	r2, r3
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	42a3      	cmp	r3, r4
 8002d4e:	d1fb      	bne.n	8002d48 <_malloc_r+0xdc>
 8002d50:	2300      	movs	r3, #0
 8002d52:	6053      	str	r3, [r2, #4]
 8002d54:	e7de      	b.n	8002d14 <_malloc_r+0xa8>
 8002d56:	230c      	movs	r3, #12
 8002d58:	6033      	str	r3, [r6, #0]
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	f000 f80c 	bl	8002d78 <__malloc_unlock>
 8002d60:	e794      	b.n	8002c8c <_malloc_r+0x20>
 8002d62:	6005      	str	r5, [r0, #0]
 8002d64:	e7d6      	b.n	8002d14 <_malloc_r+0xa8>
 8002d66:	bf00      	nop
 8002d68:	2000020c 	.word	0x2000020c

08002d6c <__malloc_lock>:
 8002d6c:	4801      	ldr	r0, [pc, #4]	@ (8002d74 <__malloc_lock+0x8>)
 8002d6e:	f7ff bf0f 	b.w	8002b90 <__retarget_lock_acquire_recursive>
 8002d72:	bf00      	nop
 8002d74:	20000204 	.word	0x20000204

08002d78 <__malloc_unlock>:
 8002d78:	4801      	ldr	r0, [pc, #4]	@ (8002d80 <__malloc_unlock+0x8>)
 8002d7a:	f7ff bf0a 	b.w	8002b92 <__retarget_lock_release_recursive>
 8002d7e:	bf00      	nop
 8002d80:	20000204 	.word	0x20000204

08002d84 <__ssputs_r>:
 8002d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d88:	688e      	ldr	r6, [r1, #8]
 8002d8a:	461f      	mov	r7, r3
 8002d8c:	42be      	cmp	r6, r7
 8002d8e:	680b      	ldr	r3, [r1, #0]
 8002d90:	4682      	mov	sl, r0
 8002d92:	460c      	mov	r4, r1
 8002d94:	4690      	mov	r8, r2
 8002d96:	d82d      	bhi.n	8002df4 <__ssputs_r+0x70>
 8002d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002da0:	d026      	beq.n	8002df0 <__ssputs_r+0x6c>
 8002da2:	6965      	ldr	r5, [r4, #20]
 8002da4:	6909      	ldr	r1, [r1, #16]
 8002da6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002daa:	eba3 0901 	sub.w	r9, r3, r1
 8002dae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002db2:	1c7b      	adds	r3, r7, #1
 8002db4:	444b      	add	r3, r9
 8002db6:	106d      	asrs	r5, r5, #1
 8002db8:	429d      	cmp	r5, r3
 8002dba:	bf38      	it	cc
 8002dbc:	461d      	movcc	r5, r3
 8002dbe:	0553      	lsls	r3, r2, #21
 8002dc0:	d527      	bpl.n	8002e12 <__ssputs_r+0x8e>
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	f7ff ff52 	bl	8002c6c <_malloc_r>
 8002dc8:	4606      	mov	r6, r0
 8002dca:	b360      	cbz	r0, 8002e26 <__ssputs_r+0xa2>
 8002dcc:	6921      	ldr	r1, [r4, #16]
 8002dce:	464a      	mov	r2, r9
 8002dd0:	f000 fae8 	bl	80033a4 <memcpy>
 8002dd4:	89a3      	ldrh	r3, [r4, #12]
 8002dd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dde:	81a3      	strh	r3, [r4, #12]
 8002de0:	6126      	str	r6, [r4, #16]
 8002de2:	6165      	str	r5, [r4, #20]
 8002de4:	444e      	add	r6, r9
 8002de6:	eba5 0509 	sub.w	r5, r5, r9
 8002dea:	6026      	str	r6, [r4, #0]
 8002dec:	60a5      	str	r5, [r4, #8]
 8002dee:	463e      	mov	r6, r7
 8002df0:	42be      	cmp	r6, r7
 8002df2:	d900      	bls.n	8002df6 <__ssputs_r+0x72>
 8002df4:	463e      	mov	r6, r7
 8002df6:	6820      	ldr	r0, [r4, #0]
 8002df8:	4632      	mov	r2, r6
 8002dfa:	4641      	mov	r1, r8
 8002dfc:	f000 faa8 	bl	8003350 <memmove>
 8002e00:	68a3      	ldr	r3, [r4, #8]
 8002e02:	1b9b      	subs	r3, r3, r6
 8002e04:	60a3      	str	r3, [r4, #8]
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	4433      	add	r3, r6
 8002e0a:	6023      	str	r3, [r4, #0]
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e12:	462a      	mov	r2, r5
 8002e14:	f000 fad4 	bl	80033c0 <_realloc_r>
 8002e18:	4606      	mov	r6, r0
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	d1e0      	bne.n	8002de0 <__ssputs_r+0x5c>
 8002e1e:	6921      	ldr	r1, [r4, #16]
 8002e20:	4650      	mov	r0, sl
 8002e22:	f7ff feb7 	bl	8002b94 <_free_r>
 8002e26:	230c      	movs	r3, #12
 8002e28:	f8ca 3000 	str.w	r3, [sl]
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e32:	81a3      	strh	r3, [r4, #12]
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	e7e9      	b.n	8002e0e <__ssputs_r+0x8a>
	...

08002e3c <_svfiprintf_r>:
 8002e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e40:	4698      	mov	r8, r3
 8002e42:	898b      	ldrh	r3, [r1, #12]
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	b09d      	sub	sp, #116	@ 0x74
 8002e48:	4607      	mov	r7, r0
 8002e4a:	460d      	mov	r5, r1
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	d510      	bpl.n	8002e72 <_svfiprintf_r+0x36>
 8002e50:	690b      	ldr	r3, [r1, #16]
 8002e52:	b973      	cbnz	r3, 8002e72 <_svfiprintf_r+0x36>
 8002e54:	2140      	movs	r1, #64	@ 0x40
 8002e56:	f7ff ff09 	bl	8002c6c <_malloc_r>
 8002e5a:	6028      	str	r0, [r5, #0]
 8002e5c:	6128      	str	r0, [r5, #16]
 8002e5e:	b930      	cbnz	r0, 8002e6e <_svfiprintf_r+0x32>
 8002e60:	230c      	movs	r3, #12
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295
 8002e68:	b01d      	add	sp, #116	@ 0x74
 8002e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e6e:	2340      	movs	r3, #64	@ 0x40
 8002e70:	616b      	str	r3, [r5, #20]
 8002e72:	2300      	movs	r3, #0
 8002e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e76:	2320      	movs	r3, #32
 8002e78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e80:	2330      	movs	r3, #48	@ 0x30
 8002e82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003020 <_svfiprintf_r+0x1e4>
 8002e86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e8a:	f04f 0901 	mov.w	r9, #1
 8002e8e:	4623      	mov	r3, r4
 8002e90:	469a      	mov	sl, r3
 8002e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e96:	b10a      	cbz	r2, 8002e9c <_svfiprintf_r+0x60>
 8002e98:	2a25      	cmp	r2, #37	@ 0x25
 8002e9a:	d1f9      	bne.n	8002e90 <_svfiprintf_r+0x54>
 8002e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8002ea0:	d00b      	beq.n	8002eba <_svfiprintf_r+0x7e>
 8002ea2:	465b      	mov	r3, fp
 8002ea4:	4622      	mov	r2, r4
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	4638      	mov	r0, r7
 8002eaa:	f7ff ff6b 	bl	8002d84 <__ssputs_r>
 8002eae:	3001      	adds	r0, #1
 8002eb0:	f000 80a7 	beq.w	8003002 <_svfiprintf_r+0x1c6>
 8002eb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002eb6:	445a      	add	r2, fp
 8002eb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8002eba:	f89a 3000 	ldrb.w	r3, [sl]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 809f 	beq.w	8003002 <_svfiprintf_r+0x1c6>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ece:	f10a 0a01 	add.w	sl, sl, #1
 8002ed2:	9304      	str	r3, [sp, #16]
 8002ed4:	9307      	str	r3, [sp, #28]
 8002ed6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002eda:	931a      	str	r3, [sp, #104]	@ 0x68
 8002edc:	4654      	mov	r4, sl
 8002ede:	2205      	movs	r2, #5
 8002ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ee4:	484e      	ldr	r0, [pc, #312]	@ (8003020 <_svfiprintf_r+0x1e4>)
 8002ee6:	f7fd f97b 	bl	80001e0 <memchr>
 8002eea:	9a04      	ldr	r2, [sp, #16]
 8002eec:	b9d8      	cbnz	r0, 8002f26 <_svfiprintf_r+0xea>
 8002eee:	06d0      	lsls	r0, r2, #27
 8002ef0:	bf44      	itt	mi
 8002ef2:	2320      	movmi	r3, #32
 8002ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ef8:	0711      	lsls	r1, r2, #28
 8002efa:	bf44      	itt	mi
 8002efc:	232b      	movmi	r3, #43	@ 0x2b
 8002efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f02:	f89a 3000 	ldrb.w	r3, [sl]
 8002f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f08:	d015      	beq.n	8002f36 <_svfiprintf_r+0xfa>
 8002f0a:	9a07      	ldr	r2, [sp, #28]
 8002f0c:	4654      	mov	r4, sl
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f04f 0c0a 	mov.w	ip, #10
 8002f14:	4621      	mov	r1, r4
 8002f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f1a:	3b30      	subs	r3, #48	@ 0x30
 8002f1c:	2b09      	cmp	r3, #9
 8002f1e:	d94b      	bls.n	8002fb8 <_svfiprintf_r+0x17c>
 8002f20:	b1b0      	cbz	r0, 8002f50 <_svfiprintf_r+0x114>
 8002f22:	9207      	str	r2, [sp, #28]
 8002f24:	e014      	b.n	8002f50 <_svfiprintf_r+0x114>
 8002f26:	eba0 0308 	sub.w	r3, r0, r8
 8002f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	9304      	str	r3, [sp, #16]
 8002f32:	46a2      	mov	sl, r4
 8002f34:	e7d2      	b.n	8002edc <_svfiprintf_r+0xa0>
 8002f36:	9b03      	ldr	r3, [sp, #12]
 8002f38:	1d19      	adds	r1, r3, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	9103      	str	r1, [sp, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	bfbb      	ittet	lt
 8002f42:	425b      	neglt	r3, r3
 8002f44:	f042 0202 	orrlt.w	r2, r2, #2
 8002f48:	9307      	strge	r3, [sp, #28]
 8002f4a:	9307      	strlt	r3, [sp, #28]
 8002f4c:	bfb8      	it	lt
 8002f4e:	9204      	strlt	r2, [sp, #16]
 8002f50:	7823      	ldrb	r3, [r4, #0]
 8002f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f54:	d10a      	bne.n	8002f6c <_svfiprintf_r+0x130>
 8002f56:	7863      	ldrb	r3, [r4, #1]
 8002f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f5a:	d132      	bne.n	8002fc2 <_svfiprintf_r+0x186>
 8002f5c:	9b03      	ldr	r3, [sp, #12]
 8002f5e:	1d1a      	adds	r2, r3, #4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	9203      	str	r2, [sp, #12]
 8002f64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f68:	3402      	adds	r4, #2
 8002f6a:	9305      	str	r3, [sp, #20]
 8002f6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003030 <_svfiprintf_r+0x1f4>
 8002f70:	7821      	ldrb	r1, [r4, #0]
 8002f72:	2203      	movs	r2, #3
 8002f74:	4650      	mov	r0, sl
 8002f76:	f7fd f933 	bl	80001e0 <memchr>
 8002f7a:	b138      	cbz	r0, 8002f8c <_svfiprintf_r+0x150>
 8002f7c:	9b04      	ldr	r3, [sp, #16]
 8002f7e:	eba0 000a 	sub.w	r0, r0, sl
 8002f82:	2240      	movs	r2, #64	@ 0x40
 8002f84:	4082      	lsls	r2, r0
 8002f86:	4313      	orrs	r3, r2
 8002f88:	3401      	adds	r4, #1
 8002f8a:	9304      	str	r3, [sp, #16]
 8002f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f90:	4824      	ldr	r0, [pc, #144]	@ (8003024 <_svfiprintf_r+0x1e8>)
 8002f92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f96:	2206      	movs	r2, #6
 8002f98:	f7fd f922 	bl	80001e0 <memchr>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d036      	beq.n	800300e <_svfiprintf_r+0x1d2>
 8002fa0:	4b21      	ldr	r3, [pc, #132]	@ (8003028 <_svfiprintf_r+0x1ec>)
 8002fa2:	bb1b      	cbnz	r3, 8002fec <_svfiprintf_r+0x1b0>
 8002fa4:	9b03      	ldr	r3, [sp, #12]
 8002fa6:	3307      	adds	r3, #7
 8002fa8:	f023 0307 	bic.w	r3, r3, #7
 8002fac:	3308      	adds	r3, #8
 8002fae:	9303      	str	r3, [sp, #12]
 8002fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fb2:	4433      	add	r3, r6
 8002fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fb6:	e76a      	b.n	8002e8e <_svfiprintf_r+0x52>
 8002fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fbc:	460c      	mov	r4, r1
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	e7a8      	b.n	8002f14 <_svfiprintf_r+0xd8>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	3401      	adds	r4, #1
 8002fc6:	9305      	str	r3, [sp, #20]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f04f 0c0a 	mov.w	ip, #10
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fd4:	3a30      	subs	r2, #48	@ 0x30
 8002fd6:	2a09      	cmp	r2, #9
 8002fd8:	d903      	bls.n	8002fe2 <_svfiprintf_r+0x1a6>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0c6      	beq.n	8002f6c <_svfiprintf_r+0x130>
 8002fde:	9105      	str	r1, [sp, #20]
 8002fe0:	e7c4      	b.n	8002f6c <_svfiprintf_r+0x130>
 8002fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e7f0      	b.n	8002fce <_svfiprintf_r+0x192>
 8002fec:	ab03      	add	r3, sp, #12
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	462a      	mov	r2, r5
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <_svfiprintf_r+0x1f0>)
 8002ff4:	a904      	add	r1, sp, #16
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	f3af 8000 	nop.w
 8002ffc:	1c42      	adds	r2, r0, #1
 8002ffe:	4606      	mov	r6, r0
 8003000:	d1d6      	bne.n	8002fb0 <_svfiprintf_r+0x174>
 8003002:	89ab      	ldrh	r3, [r5, #12]
 8003004:	065b      	lsls	r3, r3, #25
 8003006:	f53f af2d 	bmi.w	8002e64 <_svfiprintf_r+0x28>
 800300a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800300c:	e72c      	b.n	8002e68 <_svfiprintf_r+0x2c>
 800300e:	ab03      	add	r3, sp, #12
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	462a      	mov	r2, r5
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <_svfiprintf_r+0x1f0>)
 8003016:	a904      	add	r1, sp, #16
 8003018:	4638      	mov	r0, r7
 800301a:	f000 f879 	bl	8003110 <_printf_i>
 800301e:	e7ed      	b.n	8002ffc <_svfiprintf_r+0x1c0>
 8003020:	0800349c 	.word	0x0800349c
 8003024:	080034a6 	.word	0x080034a6
 8003028:	00000000 	.word	0x00000000
 800302c:	08002d85 	.word	0x08002d85
 8003030:	080034a2 	.word	0x080034a2

08003034 <_printf_common>:
 8003034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003038:	4616      	mov	r6, r2
 800303a:	4698      	mov	r8, r3
 800303c:	688a      	ldr	r2, [r1, #8]
 800303e:	690b      	ldr	r3, [r1, #16]
 8003040:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003044:	4293      	cmp	r3, r2
 8003046:	bfb8      	it	lt
 8003048:	4613      	movlt	r3, r2
 800304a:	6033      	str	r3, [r6, #0]
 800304c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003050:	4607      	mov	r7, r0
 8003052:	460c      	mov	r4, r1
 8003054:	b10a      	cbz	r2, 800305a <_printf_common+0x26>
 8003056:	3301      	adds	r3, #1
 8003058:	6033      	str	r3, [r6, #0]
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	0699      	lsls	r1, r3, #26
 800305e:	bf42      	ittt	mi
 8003060:	6833      	ldrmi	r3, [r6, #0]
 8003062:	3302      	addmi	r3, #2
 8003064:	6033      	strmi	r3, [r6, #0]
 8003066:	6825      	ldr	r5, [r4, #0]
 8003068:	f015 0506 	ands.w	r5, r5, #6
 800306c:	d106      	bne.n	800307c <_printf_common+0x48>
 800306e:	f104 0a19 	add.w	sl, r4, #25
 8003072:	68e3      	ldr	r3, [r4, #12]
 8003074:	6832      	ldr	r2, [r6, #0]
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	42ab      	cmp	r3, r5
 800307a:	dc26      	bgt.n	80030ca <_printf_common+0x96>
 800307c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003080:	6822      	ldr	r2, [r4, #0]
 8003082:	3b00      	subs	r3, #0
 8003084:	bf18      	it	ne
 8003086:	2301      	movne	r3, #1
 8003088:	0692      	lsls	r2, r2, #26
 800308a:	d42b      	bmi.n	80030e4 <_printf_common+0xb0>
 800308c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003090:	4641      	mov	r1, r8
 8003092:	4638      	mov	r0, r7
 8003094:	47c8      	blx	r9
 8003096:	3001      	adds	r0, #1
 8003098:	d01e      	beq.n	80030d8 <_printf_common+0xa4>
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	6922      	ldr	r2, [r4, #16]
 800309e:	f003 0306 	and.w	r3, r3, #6
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	bf02      	ittt	eq
 80030a6:	68e5      	ldreq	r5, [r4, #12]
 80030a8:	6833      	ldreq	r3, [r6, #0]
 80030aa:	1aed      	subeq	r5, r5, r3
 80030ac:	68a3      	ldr	r3, [r4, #8]
 80030ae:	bf0c      	ite	eq
 80030b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030b4:	2500      	movne	r5, #0
 80030b6:	4293      	cmp	r3, r2
 80030b8:	bfc4      	itt	gt
 80030ba:	1a9b      	subgt	r3, r3, r2
 80030bc:	18ed      	addgt	r5, r5, r3
 80030be:	2600      	movs	r6, #0
 80030c0:	341a      	adds	r4, #26
 80030c2:	42b5      	cmp	r5, r6
 80030c4:	d11a      	bne.n	80030fc <_printf_common+0xc8>
 80030c6:	2000      	movs	r0, #0
 80030c8:	e008      	b.n	80030dc <_printf_common+0xa8>
 80030ca:	2301      	movs	r3, #1
 80030cc:	4652      	mov	r2, sl
 80030ce:	4641      	mov	r1, r8
 80030d0:	4638      	mov	r0, r7
 80030d2:	47c8      	blx	r9
 80030d4:	3001      	adds	r0, #1
 80030d6:	d103      	bne.n	80030e0 <_printf_common+0xac>
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295
 80030dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030e0:	3501      	adds	r5, #1
 80030e2:	e7c6      	b.n	8003072 <_printf_common+0x3e>
 80030e4:	18e1      	adds	r1, r4, r3
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	2030      	movs	r0, #48	@ 0x30
 80030ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80030ee:	4422      	add	r2, r4
 80030f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80030f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80030f8:	3302      	adds	r3, #2
 80030fa:	e7c7      	b.n	800308c <_printf_common+0x58>
 80030fc:	2301      	movs	r3, #1
 80030fe:	4622      	mov	r2, r4
 8003100:	4641      	mov	r1, r8
 8003102:	4638      	mov	r0, r7
 8003104:	47c8      	blx	r9
 8003106:	3001      	adds	r0, #1
 8003108:	d0e6      	beq.n	80030d8 <_printf_common+0xa4>
 800310a:	3601      	adds	r6, #1
 800310c:	e7d9      	b.n	80030c2 <_printf_common+0x8e>
	...

08003110 <_printf_i>:
 8003110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003114:	7e0f      	ldrb	r7, [r1, #24]
 8003116:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003118:	2f78      	cmp	r7, #120	@ 0x78
 800311a:	4691      	mov	r9, r2
 800311c:	4680      	mov	r8, r0
 800311e:	460c      	mov	r4, r1
 8003120:	469a      	mov	sl, r3
 8003122:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003126:	d807      	bhi.n	8003138 <_printf_i+0x28>
 8003128:	2f62      	cmp	r7, #98	@ 0x62
 800312a:	d80a      	bhi.n	8003142 <_printf_i+0x32>
 800312c:	2f00      	cmp	r7, #0
 800312e:	f000 80d2 	beq.w	80032d6 <_printf_i+0x1c6>
 8003132:	2f58      	cmp	r7, #88	@ 0x58
 8003134:	f000 80b9 	beq.w	80032aa <_printf_i+0x19a>
 8003138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800313c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003140:	e03a      	b.n	80031b8 <_printf_i+0xa8>
 8003142:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003146:	2b15      	cmp	r3, #21
 8003148:	d8f6      	bhi.n	8003138 <_printf_i+0x28>
 800314a:	a101      	add	r1, pc, #4	@ (adr r1, 8003150 <_printf_i+0x40>)
 800314c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003150:	080031a9 	.word	0x080031a9
 8003154:	080031bd 	.word	0x080031bd
 8003158:	08003139 	.word	0x08003139
 800315c:	08003139 	.word	0x08003139
 8003160:	08003139 	.word	0x08003139
 8003164:	08003139 	.word	0x08003139
 8003168:	080031bd 	.word	0x080031bd
 800316c:	08003139 	.word	0x08003139
 8003170:	08003139 	.word	0x08003139
 8003174:	08003139 	.word	0x08003139
 8003178:	08003139 	.word	0x08003139
 800317c:	080032bd 	.word	0x080032bd
 8003180:	080031e7 	.word	0x080031e7
 8003184:	08003277 	.word	0x08003277
 8003188:	08003139 	.word	0x08003139
 800318c:	08003139 	.word	0x08003139
 8003190:	080032df 	.word	0x080032df
 8003194:	08003139 	.word	0x08003139
 8003198:	080031e7 	.word	0x080031e7
 800319c:	08003139 	.word	0x08003139
 80031a0:	08003139 	.word	0x08003139
 80031a4:	0800327f 	.word	0x0800327f
 80031a8:	6833      	ldr	r3, [r6, #0]
 80031aa:	1d1a      	adds	r2, r3, #4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6032      	str	r2, [r6, #0]
 80031b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031b8:	2301      	movs	r3, #1
 80031ba:	e09d      	b.n	80032f8 <_printf_i+0x1e8>
 80031bc:	6833      	ldr	r3, [r6, #0]
 80031be:	6820      	ldr	r0, [r4, #0]
 80031c0:	1d19      	adds	r1, r3, #4
 80031c2:	6031      	str	r1, [r6, #0]
 80031c4:	0606      	lsls	r6, r0, #24
 80031c6:	d501      	bpl.n	80031cc <_printf_i+0xbc>
 80031c8:	681d      	ldr	r5, [r3, #0]
 80031ca:	e003      	b.n	80031d4 <_printf_i+0xc4>
 80031cc:	0645      	lsls	r5, r0, #25
 80031ce:	d5fb      	bpl.n	80031c8 <_printf_i+0xb8>
 80031d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80031d4:	2d00      	cmp	r5, #0
 80031d6:	da03      	bge.n	80031e0 <_printf_i+0xd0>
 80031d8:	232d      	movs	r3, #45	@ 0x2d
 80031da:	426d      	negs	r5, r5
 80031dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031e0:	4859      	ldr	r0, [pc, #356]	@ (8003348 <_printf_i+0x238>)
 80031e2:	230a      	movs	r3, #10
 80031e4:	e011      	b.n	800320a <_printf_i+0xfa>
 80031e6:	6821      	ldr	r1, [r4, #0]
 80031e8:	6833      	ldr	r3, [r6, #0]
 80031ea:	0608      	lsls	r0, r1, #24
 80031ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80031f0:	d402      	bmi.n	80031f8 <_printf_i+0xe8>
 80031f2:	0649      	lsls	r1, r1, #25
 80031f4:	bf48      	it	mi
 80031f6:	b2ad      	uxthmi	r5, r5
 80031f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80031fa:	4853      	ldr	r0, [pc, #332]	@ (8003348 <_printf_i+0x238>)
 80031fc:	6033      	str	r3, [r6, #0]
 80031fe:	bf14      	ite	ne
 8003200:	230a      	movne	r3, #10
 8003202:	2308      	moveq	r3, #8
 8003204:	2100      	movs	r1, #0
 8003206:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800320a:	6866      	ldr	r6, [r4, #4]
 800320c:	60a6      	str	r6, [r4, #8]
 800320e:	2e00      	cmp	r6, #0
 8003210:	bfa2      	ittt	ge
 8003212:	6821      	ldrge	r1, [r4, #0]
 8003214:	f021 0104 	bicge.w	r1, r1, #4
 8003218:	6021      	strge	r1, [r4, #0]
 800321a:	b90d      	cbnz	r5, 8003220 <_printf_i+0x110>
 800321c:	2e00      	cmp	r6, #0
 800321e:	d04b      	beq.n	80032b8 <_printf_i+0x1a8>
 8003220:	4616      	mov	r6, r2
 8003222:	fbb5 f1f3 	udiv	r1, r5, r3
 8003226:	fb03 5711 	mls	r7, r3, r1, r5
 800322a:	5dc7      	ldrb	r7, [r0, r7]
 800322c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003230:	462f      	mov	r7, r5
 8003232:	42bb      	cmp	r3, r7
 8003234:	460d      	mov	r5, r1
 8003236:	d9f4      	bls.n	8003222 <_printf_i+0x112>
 8003238:	2b08      	cmp	r3, #8
 800323a:	d10b      	bne.n	8003254 <_printf_i+0x144>
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	07df      	lsls	r7, r3, #31
 8003240:	d508      	bpl.n	8003254 <_printf_i+0x144>
 8003242:	6923      	ldr	r3, [r4, #16]
 8003244:	6861      	ldr	r1, [r4, #4]
 8003246:	4299      	cmp	r1, r3
 8003248:	bfde      	ittt	le
 800324a:	2330      	movle	r3, #48	@ 0x30
 800324c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003250:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003254:	1b92      	subs	r2, r2, r6
 8003256:	6122      	str	r2, [r4, #16]
 8003258:	f8cd a000 	str.w	sl, [sp]
 800325c:	464b      	mov	r3, r9
 800325e:	aa03      	add	r2, sp, #12
 8003260:	4621      	mov	r1, r4
 8003262:	4640      	mov	r0, r8
 8003264:	f7ff fee6 	bl	8003034 <_printf_common>
 8003268:	3001      	adds	r0, #1
 800326a:	d14a      	bne.n	8003302 <_printf_i+0x1f2>
 800326c:	f04f 30ff 	mov.w	r0, #4294967295
 8003270:	b004      	add	sp, #16
 8003272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	f043 0320 	orr.w	r3, r3, #32
 800327c:	6023      	str	r3, [r4, #0]
 800327e:	4833      	ldr	r0, [pc, #204]	@ (800334c <_printf_i+0x23c>)
 8003280:	2778      	movs	r7, #120	@ 0x78
 8003282:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	6831      	ldr	r1, [r6, #0]
 800328a:	061f      	lsls	r7, r3, #24
 800328c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003290:	d402      	bmi.n	8003298 <_printf_i+0x188>
 8003292:	065f      	lsls	r7, r3, #25
 8003294:	bf48      	it	mi
 8003296:	b2ad      	uxthmi	r5, r5
 8003298:	6031      	str	r1, [r6, #0]
 800329a:	07d9      	lsls	r1, r3, #31
 800329c:	bf44      	itt	mi
 800329e:	f043 0320 	orrmi.w	r3, r3, #32
 80032a2:	6023      	strmi	r3, [r4, #0]
 80032a4:	b11d      	cbz	r5, 80032ae <_printf_i+0x19e>
 80032a6:	2310      	movs	r3, #16
 80032a8:	e7ac      	b.n	8003204 <_printf_i+0xf4>
 80032aa:	4827      	ldr	r0, [pc, #156]	@ (8003348 <_printf_i+0x238>)
 80032ac:	e7e9      	b.n	8003282 <_printf_i+0x172>
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	f023 0320 	bic.w	r3, r3, #32
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	e7f6      	b.n	80032a6 <_printf_i+0x196>
 80032b8:	4616      	mov	r6, r2
 80032ba:	e7bd      	b.n	8003238 <_printf_i+0x128>
 80032bc:	6833      	ldr	r3, [r6, #0]
 80032be:	6825      	ldr	r5, [r4, #0]
 80032c0:	6961      	ldr	r1, [r4, #20]
 80032c2:	1d18      	adds	r0, r3, #4
 80032c4:	6030      	str	r0, [r6, #0]
 80032c6:	062e      	lsls	r6, r5, #24
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	d501      	bpl.n	80032d0 <_printf_i+0x1c0>
 80032cc:	6019      	str	r1, [r3, #0]
 80032ce:	e002      	b.n	80032d6 <_printf_i+0x1c6>
 80032d0:	0668      	lsls	r0, r5, #25
 80032d2:	d5fb      	bpl.n	80032cc <_printf_i+0x1bc>
 80032d4:	8019      	strh	r1, [r3, #0]
 80032d6:	2300      	movs	r3, #0
 80032d8:	6123      	str	r3, [r4, #16]
 80032da:	4616      	mov	r6, r2
 80032dc:	e7bc      	b.n	8003258 <_printf_i+0x148>
 80032de:	6833      	ldr	r3, [r6, #0]
 80032e0:	1d1a      	adds	r2, r3, #4
 80032e2:	6032      	str	r2, [r6, #0]
 80032e4:	681e      	ldr	r6, [r3, #0]
 80032e6:	6862      	ldr	r2, [r4, #4]
 80032e8:	2100      	movs	r1, #0
 80032ea:	4630      	mov	r0, r6
 80032ec:	f7fc ff78 	bl	80001e0 <memchr>
 80032f0:	b108      	cbz	r0, 80032f6 <_printf_i+0x1e6>
 80032f2:	1b80      	subs	r0, r0, r6
 80032f4:	6060      	str	r0, [r4, #4]
 80032f6:	6863      	ldr	r3, [r4, #4]
 80032f8:	6123      	str	r3, [r4, #16]
 80032fa:	2300      	movs	r3, #0
 80032fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003300:	e7aa      	b.n	8003258 <_printf_i+0x148>
 8003302:	6923      	ldr	r3, [r4, #16]
 8003304:	4632      	mov	r2, r6
 8003306:	4649      	mov	r1, r9
 8003308:	4640      	mov	r0, r8
 800330a:	47d0      	blx	sl
 800330c:	3001      	adds	r0, #1
 800330e:	d0ad      	beq.n	800326c <_printf_i+0x15c>
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	079b      	lsls	r3, r3, #30
 8003314:	d413      	bmi.n	800333e <_printf_i+0x22e>
 8003316:	68e0      	ldr	r0, [r4, #12]
 8003318:	9b03      	ldr	r3, [sp, #12]
 800331a:	4298      	cmp	r0, r3
 800331c:	bfb8      	it	lt
 800331e:	4618      	movlt	r0, r3
 8003320:	e7a6      	b.n	8003270 <_printf_i+0x160>
 8003322:	2301      	movs	r3, #1
 8003324:	4632      	mov	r2, r6
 8003326:	4649      	mov	r1, r9
 8003328:	4640      	mov	r0, r8
 800332a:	47d0      	blx	sl
 800332c:	3001      	adds	r0, #1
 800332e:	d09d      	beq.n	800326c <_printf_i+0x15c>
 8003330:	3501      	adds	r5, #1
 8003332:	68e3      	ldr	r3, [r4, #12]
 8003334:	9903      	ldr	r1, [sp, #12]
 8003336:	1a5b      	subs	r3, r3, r1
 8003338:	42ab      	cmp	r3, r5
 800333a:	dcf2      	bgt.n	8003322 <_printf_i+0x212>
 800333c:	e7eb      	b.n	8003316 <_printf_i+0x206>
 800333e:	2500      	movs	r5, #0
 8003340:	f104 0619 	add.w	r6, r4, #25
 8003344:	e7f5      	b.n	8003332 <_printf_i+0x222>
 8003346:	bf00      	nop
 8003348:	080034ad 	.word	0x080034ad
 800334c:	080034be 	.word	0x080034be

08003350 <memmove>:
 8003350:	4288      	cmp	r0, r1
 8003352:	b510      	push	{r4, lr}
 8003354:	eb01 0402 	add.w	r4, r1, r2
 8003358:	d902      	bls.n	8003360 <memmove+0x10>
 800335a:	4284      	cmp	r4, r0
 800335c:	4623      	mov	r3, r4
 800335e:	d807      	bhi.n	8003370 <memmove+0x20>
 8003360:	1e43      	subs	r3, r0, #1
 8003362:	42a1      	cmp	r1, r4
 8003364:	d008      	beq.n	8003378 <memmove+0x28>
 8003366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800336a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800336e:	e7f8      	b.n	8003362 <memmove+0x12>
 8003370:	4402      	add	r2, r0
 8003372:	4601      	mov	r1, r0
 8003374:	428a      	cmp	r2, r1
 8003376:	d100      	bne.n	800337a <memmove+0x2a>
 8003378:	bd10      	pop	{r4, pc}
 800337a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800337e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003382:	e7f7      	b.n	8003374 <memmove+0x24>

08003384 <_sbrk_r>:
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	4d06      	ldr	r5, [pc, #24]	@ (80033a0 <_sbrk_r+0x1c>)
 8003388:	2300      	movs	r3, #0
 800338a:	4604      	mov	r4, r0
 800338c:	4608      	mov	r0, r1
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	f7fd fac4 	bl	800091c <_sbrk>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	d102      	bne.n	800339e <_sbrk_r+0x1a>
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	b103      	cbz	r3, 800339e <_sbrk_r+0x1a>
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	bd38      	pop	{r3, r4, r5, pc}
 80033a0:	20000200 	.word	0x20000200

080033a4 <memcpy>:
 80033a4:	440a      	add	r2, r1
 80033a6:	4291      	cmp	r1, r2
 80033a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80033ac:	d100      	bne.n	80033b0 <memcpy+0xc>
 80033ae:	4770      	bx	lr
 80033b0:	b510      	push	{r4, lr}
 80033b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033ba:	4291      	cmp	r1, r2
 80033bc:	d1f9      	bne.n	80033b2 <memcpy+0xe>
 80033be:	bd10      	pop	{r4, pc}

080033c0 <_realloc_r>:
 80033c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033c4:	4680      	mov	r8, r0
 80033c6:	4615      	mov	r5, r2
 80033c8:	460c      	mov	r4, r1
 80033ca:	b921      	cbnz	r1, 80033d6 <_realloc_r+0x16>
 80033cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033d0:	4611      	mov	r1, r2
 80033d2:	f7ff bc4b 	b.w	8002c6c <_malloc_r>
 80033d6:	b92a      	cbnz	r2, 80033e4 <_realloc_r+0x24>
 80033d8:	f7ff fbdc 	bl	8002b94 <_free_r>
 80033dc:	2400      	movs	r4, #0
 80033de:	4620      	mov	r0, r4
 80033e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033e4:	f000 f81a 	bl	800341c <_malloc_usable_size_r>
 80033e8:	4285      	cmp	r5, r0
 80033ea:	4606      	mov	r6, r0
 80033ec:	d802      	bhi.n	80033f4 <_realloc_r+0x34>
 80033ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80033f2:	d8f4      	bhi.n	80033de <_realloc_r+0x1e>
 80033f4:	4629      	mov	r1, r5
 80033f6:	4640      	mov	r0, r8
 80033f8:	f7ff fc38 	bl	8002c6c <_malloc_r>
 80033fc:	4607      	mov	r7, r0
 80033fe:	2800      	cmp	r0, #0
 8003400:	d0ec      	beq.n	80033dc <_realloc_r+0x1c>
 8003402:	42b5      	cmp	r5, r6
 8003404:	462a      	mov	r2, r5
 8003406:	4621      	mov	r1, r4
 8003408:	bf28      	it	cs
 800340a:	4632      	movcs	r2, r6
 800340c:	f7ff ffca 	bl	80033a4 <memcpy>
 8003410:	4621      	mov	r1, r4
 8003412:	4640      	mov	r0, r8
 8003414:	f7ff fbbe 	bl	8002b94 <_free_r>
 8003418:	463c      	mov	r4, r7
 800341a:	e7e0      	b.n	80033de <_realloc_r+0x1e>

0800341c <_malloc_usable_size_r>:
 800341c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003420:	1f18      	subs	r0, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	bfbc      	itt	lt
 8003426:	580b      	ldrlt	r3, [r1, r0]
 8003428:	18c0      	addlt	r0, r0, r3
 800342a:	4770      	bx	lr

0800342c <_init>:
 800342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342e:	bf00      	nop
 8003430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003432:	bc08      	pop	{r3}
 8003434:	469e      	mov	lr, r3
 8003436:	4770      	bx	lr

08003438 <_fini>:
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	bf00      	nop
 800343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343e:	bc08      	pop	{r3}
 8003440:	469e      	mov	lr, r3
 8003442:	4770      	bx	lr
